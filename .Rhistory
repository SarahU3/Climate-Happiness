digits = 2, type = 'html')
labels <- c('GRE Score', 'GPA Score',
'2nd Ranked School', '3rd Ranked School',
'4th Ranked School', '(Intercept)')
stargazer::stargazer(L1, L2, L3, covariate.labels = labels,
title = 'Logistic Regression Estimates of Grad School Acceptance',
digits = 2, type = 'html')
labels <- c('GRE Score', 'GPA Score',
'2nd Ranked School', '3rd Ranked School',
'4th Ranked School', '(Intercept)')
stargazer::stargazer(L1, L2, L3, covariate.labels = labels,
title = 'Logistic Regression Estimates of Grad School Acceptance',
digits = 2, type = 'latex', header = FALSE)
stargazer(L1, L2, L3, type = 'text')
install.packages(simGLM)
library(simGLM)
install.packages("simGLM")
library(simGLM)
install.packages("simGLM")
install.packages("simGLM")
install.package("simGLM")
install.packages("simGLM")
ghit::install_github('christophergandrud/simGLM')
install_github('christophergandrud/simGLM')
install.packages("ghit")
ghit::install_github('christophergandrud/simGLM')
library(car) # contains data
library(simGLM)
library(ggplot2) # only needed for adding additional arguments outside of sim_glm
# Estimate model
m1 <- lm(prestige ~ education + type, data = Prestige)
# Create fitted values
fitted_prestige <- expand.grid(education = 6:16, typewc = 1)
# Simulate and plot
sim_glm(obj = m1, newdata = fitted_prestige, x_coef = 'education') + ylab('Predicted Job Prestige\n') + xlab('\nYears of Education')
## typeprof fitted at 0
library("ghit", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library(simGLM)
ghit::install_github('christophergandrud/simGLM')
devtools::install_github('christophergandrud/simGLM')
install.packages('devtools')
devtools::install_github('christophergandrud/simGLM')
library(simGLM)
library(car) # contains data
library(simGLM)
library(ggplot2) # only needed for adding additional arguments outside of sim_glm
# Estimate model
m1 <- lm(prestige ~ education + type, data = Prestige)
# Create fitted values
fitted_prestige <- expand.grid(education = 6:16, typewc = 1)
# Simulate and plot
sim_glm(obj = m1, newdata = fitted_prestige, x_coef = 'education') + ylab('Predicted Job Prestige\n') + xlab('\nYears of Education')
## typeprof fitted at 0
install.packages("car")
library(car) # contains data
library(simGLM)
library(ggplot2) # only needed for adding additional arguments outside of sim_glm
# Estimate model
m1 <- lm(prestige ~ education + type, data = Prestige)
# Create fitted values
fitted_prestige <- expand.grid(education = 6:16, typewc = 1)
# Simulate and plot
sim_glm(obj = m1, newdata = fitted_prestige, x_coef = 'education') + ylab('Predicted Job Prestige\n') + xlab('\nYears of Education')
## typeprof fitted at 0
URL <- 'http://www.ats.ucla.edu/stat/data/binary.csv'
Admission <- read.csv(URL)
Admission$rank <- as.factor(Admission$rank)
# Estimate model
m2 <- glm(admit ~ gre + gpa + rank, data = Admission, family = 'binomial')
# Create fitted values
fitted_admit <- expand.grid(gre = seq(220, 800, by = 10), gpa = c(2, 4),
rank4 = 1)
# Simulate and plot
sim_glm(obj = m2, newdata = fitted_admit, model = 'logit', x_coef = 'gre',
group_coef = 'gpa')
install.packages("xlsxjars")
install.packages("rJava")
install.packages("xlsxjars")
install.packages("xlsx")
library(xlsxjars)
library(rJava)
library(xlsxjars)
library(xlsx)
export_land_primary <- read.table("~/Documents/Hertie 2016/Collaborative Social Science Data/Research Project/Climate-Happiness-Repository/Data/export_land_primary.xlsx", header=TRUE, quote="\"")
View(export_land_primary)
install.packages("xlsx")
install.packages("xlsxjars")
install.packages("rJava")
library(rJava)
library(xlsxjars)
library(xlsx)
export_land_primary <- read.csv("~/Documents/Hertie 2016/Collaborative Social Science Data/Research Project/Climate-Happiness-Repository/Data/export_land_primary.csv", comment.char="#")
View(export_land_primary)
use warnings()
use warnings()
warnings()
library(DataCombine)
library(WDI)
library(survival)
library(ggplot2)
library(Hmisc)
library(knitr)
library(googleVis)
library(Zelig)
setwd("~/Documents/Hertie 2016/Collaborative Social Science Data/Research Project/GitHub/Climate-Happiness")
source("Data/AnalysisSource.R")
install.packages("effects")
source("Data/AnalysisSource.R")
install.packages("ggplot")
source("Data/AnalysisSource.R")
source("Data/AnalysisSource.R")
library(repmis)
possibles <- c('~/GitHub/Climate-Happiness/',
'~/Documents/Hertie 2016/Collaborative Social Science Data/Research Project/GitHub/Climate-Happiness/')
set_valid_wd(possibles)
data3 <- read.csv("All_Merged_Data.csv")
attach(data3)
```
```{r echo=FALSE, results='hide', message=FALSE}
#create aggregate dataframe to create plots for GoogleVis
#changing state names to correspond to GoogleVis provinces codes (Germany)
suppressPackageStartupMessages(library(googleVis))
#aggregate yearly emissions data by state
agg <- aggregate(cbind(CO2perSqKm) ~ State + Year + Stateid, FUN=mean, data=data3)
allvar <- aggregate(cbind(CO2perSqKm, satis, environ, GrossIncome) ~ State + Year + Stateid, FUN=mean, data=data3)
#Transform yearly data to numeric
transform(agg, Year = as.numeric(Year))
#Replace problematic state names
Replace1 <- data.frame(from = c("Baden-W\xcc_rttemberg", "Th\xcc_ringen"), to = c("Baden-Wuerttemberg", "Thueringen"))
allvar <- FindReplace(data=allvar, Var = "Stateid", replaceData = Replace1, from = "from", to = "to",
exact = TRUE, vector = FALSE)
allvar <- FindReplace(data=allvar, Var = "State", replaceData = Replace1, from = "from", to = "to",
exact = TRUE, vector = FALSE)
#create new vector with state codes
Replaces <- data.frame(from = c("Baden-Wuerttemberg", "Bayern", "Bremen", "Berlin", "Brandenburg", "Hamburg" , "Hessen", "Mecklenburg-Vorpommern", "Niedersachsen", "Nordrhein-Westfalen", "Rheinland-Pfalz", "Sachsen", "Sachsen-Anhalt", "Schleswig-Holstein", "Saarland", "Thueringen"), to = c("DE-BW", "DE-BY", "DE-HB", "DE-BE", "DE-BB", "DE-HH", "DE-HE", "DE-MV", "DE-NI", "DE-NW", "DE-RP", "DE-SN", "DE-ST", "DE-SH", "DE-SL", "DE-TH"))
New <- FindReplace(data=allvar, Var = "Stateid", replaceData = Replaces, from = "from", to = "to",
exact = TRUE, vector = FALSE)
New[, c(2,4)] <- sapply(New[, c(2,4)], as.numeric)
## Create Geo Charts option code for geovis plot
geoChartDE <- list(region="DE",
resolution="provinces",
legend="{numberFormat:'#,###.00'}")
# Plot map of german emissions
Map <- gvisGeoChart(New, locationvar = 'State',
colorvar = 'CO2perSqKm',
options = geoChartDE)
plot(Map, tag = 'chart')
plot(Map)
View(data)
View(allvar)
agg <- aggregate(cbind(CO2perSqKm) ~ State + Year, FUN=mean, data=data3)
View(agg)
View(data)
View(data3)
# DATA GATHERING AND MANIPULATION (see "Section 2. Data" in the Assignment 3)
# Source file for assignment 3 (Final Research Project)
# Authors: Katie, Meerim, and Sarah
### 1. Preparation ###
#  Necessary packages
library(dplyr)
library(car) #scatterplots with panel data
library(httr)
library(foreign) #to read .dta files
library(rJava) # necessary for xlsxjar package
library(xlsxjars) # necessary for xlsx package
library(xlsx) # to read xls files
library(ggplot2)
library(tidyr) # tidy tables
library(repmis)
library(rio) # export files from R
library(XML) # read URL links
library(xml2)
library(rvest) # exporting tables
library(psych) # multilevel analysis
library(plm) # panel data regression
library(gsubfn) # replacing characters
library(multilevel) # multilevel analysis
library(nlme) # GLM models
library(texreg)
library(xtable)
library(stargazer)
library(effects) # for graphing MCM
library(repmis)
# Setting relative path
possibles <- c('~/GitHub/Climate-Happiness/Data',
'~/Documents/Hertie 2016/Collaborative Social Science Data/Research Project/GitHub/Climate-Happiness/Data')
set_valid_wd(possibles)
#----------------------------------------------------------#
### 2. Data for Bundeslaender CO2 per capita emissions (Source: Statista, UGRdL, & AfEE) ###
# Merging files using file name pattern (all States are covered except NRW)
all_files <- list.files(path='Emissions', pattern="statistic_id")
all_subbed <- NULL
# Cleaning in a loop
for (i in all_files) {
message(i)
if (grepl(pattern = '.xls$', x = i)) {
message('Skipped')
}
else if (grepl(pattern = '.xlsx', x = i)) {
# Load individual document in to R as a list
temp_all <- read.xlsx(i, sheetIndex=2, header=FALSE)
temp_bundesland <- read.xlsx(i, sheetIndex=2, startRow=3, colIndex=2:2, endRow=3, header=FALSE)
temp_data <- read.xlsx(i, sheetIndex=2, startRow=6, header=FALSE)
# Extract specific cell for the name of the state
names(temp_data) <- c('Year', 'Emissions')
temp_data$State <- paste(temp_bundesland[1,1])
# Bind individual project to main data frame
all_subbed <- rbind(all_subbed, temp_data)
}
}
## Cleanup for no extra words, | means "and", //is used for special characteristics such as *
all_subbed <- as.data.frame(sapply(all_subbed, gsub, pattern="Kohlendioxid-Emissionen je Einwohner im |Kohlendioxid-Emissionen je Einwohner in | bis 2012| bis 2010| bis 2011|\\**", replacement=""))
# Save as .csv
export(all_subbed, file = 'Emissions_cleaned.csv')
# # EXTRA: Cleaning individual file
# data <- read.xlsx2(all_files[3], sheetIndex=2, startRow=6, header=FALSE)
# colnames(data) <- c("Year", "Emissions")
# test <- read.xlsx(all_files[3], sheetIndex=2, startRow=3, colIndex=2:2, endRow=3, header=FALSE)
# data$Bundesland <- paste(test[1,1]) #create a new column with same values for all rows
# Extract missing info on NRW, while also modifying the excel file (see Appendix 1)
all.link <- 'http://www.ugrdl.de/tab34.htm'
Gase.table = readHTMLTable(all.link, header=T, which=1, stringsAsFactors=F)
names(Gase.table) <- c("State", "1990", "1995", "2000", "2005", "2010", "2011", "2011*", "2012")
export(Gase.table, file = 'Gase.csv')
# Merging CO2 files
NRW <- read.csv(file.path("Emissions", 'NRW.csv'), header=TRUE) #original file was amended by combining data from "Gase" and "foederal_erneuerbar-Wirtschaft_Datenblatt"
NRW <- as.data.frame(sapply(NRW, gsub, pattern="Kohlendioxid-Emissionen je Einwohner im |Kohlendioxid-Emissionen je Einwohner in | bis 2012| bis 2010| bis 2011|\\**", replacement=""))
NRW <- NRW[c(1:15), 1:3]
general <- rbind(all_subbed, NRW)
# Cleaning up names
export(general, file="Emissions_Final.csv")
#---------------------------------------------------------#
### 3. Total Emissions data (instead of per capita) from Länderarbeitskreis Energiebilanzen
TotalEmissions <-read.xlsx(file.path("Emissions", "allbundeslaender_c100.xlsx"), sheetIndex=1, startRow = 3, endRow = 371)
# Coerce to numeric
TotalEmissions$CO2.EmissionenInsgesamt <- as.numeric(as.character(TotalEmissions$CO2.EmissionenInsgesamt))
TotalEmissions$Jahr <- sapply(TotalEmissions$Jahr, as.numeric)
names(TotalEmissions) <- c("State", "Year", "CO2Tons")
### Forming Emissions per km^2
PopURL <- "http://www.statistik-portal.de/Statistik-Portal/en/en_jb01_jahrtab1.asp"
AreaTableHTML <- PopURL %>% read_html() %>%
html_nodes("#tblen") %>%
html_table(,fill=TRUE) %>%
as.data.frame
# clean resulting data frame
AreaTable <- AreaTableHTML[c(5:20), 1:2]
names(AreaTable) <- c("State", "sqkm")
# need to convert sqkm to numeric
AreaTable$sqkm <- gsub(",","",AreaTable$sqkm)
AreaTable$sqkm <- as.numeric(as.character(AreaTable$sqkm, dec="."))
# merge emissions and area, calculate emissions/sq km
landemissions <- merge(TotalEmissions,AreaTable,by="State")
landemissions$CO2perSqKm <- landemissions$CO2Tons/landemissions$sqkm*1000
#---------------------------------------------------------#
### 4. Merging GSOEP and Emissions files
# Tranforming GSOEP dta file to csv for merging (Source:DIW)
GSOEP = read.dta(file.path("GSOEP", "SOEP_short12.dta"))
GSOEP_income =  read.dta(file.path("GSOEP", "SOEP_income12.dta"))
# Write it to CSV
write.csv(GSOEP, file = "GSOEP.csv", row.names = FALSE)
write.csv(GSOEP_income, file = "GSOEP_income.csv", row.names = FALSE)
# Read all files to be merged together
emissions = read.csv("Emissions_Final.csv")
GSOEP = read.csv("GSOEP.csv")
GSOEP_income = read.csv("GSOEP_income.csv")
# Merging GSOEP & persq/km emissions & overall emissions
data <- merge(GSOEP, landemissions, by=c("Year","State"))
incomedata <- merge(GSOEP_income, landemissions, by=c('Year', 'State'))
finaldata <- merge(incomedata, emissions, by=c('Year', 'State'))
finaldata <-as.data.frame(sapply(finaldata, gsub, pattern="ü",replacement="ue"))
finaldata <-as.data.frame(sapply(finaldata, gsub, pattern="Ã¼",replacement="ue"))
# Convert factors to numeric
finaldata$satis <- as.numeric(as.character(finaldata$satis))
finaldata$CO2Tons <- as.numeric(as.character(finaldata$CO2Tons))
finaldata$sqkm <- as.numeric(as.character(finaldata$sqkm))
finaldata$CO2perSqKm <- as.numeric(as.character(finaldata$CO2perSqKm))
finaldata$age <- as.numeric(as.character(finaldata$age))
finaldata$plc0013 <- as.numeric(as.character(finaldata$plc0013))
finaldata$plb0186 <- as.numeric(as.character(finaldata$plb0186))
finaldata$Emissions <- as.numeric(as.character(finaldata$Emissions))
# XConvert State variable into numeric
finaldata$Stateid <- as.numeric(as.factor(finaldata$State))
finaldata$Stateid <- factor( as.numeric(as.factor(finaldata$State)),
labels = levels(finaldata$State))
# Drop unnecessary columns
finaldata <- finaldata[,c(1:7,9:11,20, 22:28,30:33)]
names(finaldata) <- c("Year", "State", "pid", "WorkHours","GrossIncome","NetIncome",
"JobSecurity","GermanBorn","Edu01", "Edu02","satis_labels", "satis",
"environ","Stateid","gender","age","emp","fam","CO2Tons","sqkm",
"CO2perSqKm","Emissions")
# Export merged data to single CSV file
export(finaldata, file="All_Merged_Data.csv")
# Check the status of the data
sapply(finaldata, class)
sapply(finaldata, mode)
#---------------------------------------------------------#
# 5. Extra full dataset for Multilevel Analysis
data <- merge(GSOEP, landemissions, by=c("Year","State"))
data <- merge(data, emissions, by=c("Year","State"))
data <-as.data.frame(sapply(data, gsub, pattern="ü",replacement="ue"))
data$satis <- as.numeric(as.character(data$satis))
data$CO2Tons <- as.numeric(as.character(data$CO2Tons))
data$sqkm <- as.numeric(as.character(data$sqkm))
data$CO2perSqKm <- as.numeric(as.character(data$CO2perSqKm))
data$age <- as.numeric(as.character(data$age))
data$Emissions <- as.numeric(as.character(data$Emissions))
data$Stateid <- as.numeric(as.factor(data$State))
data$Stateid <- factor( as.numeric(as.factor(data$State)),
labels = levels(data$State))
data <- data[,c(1:3,12,14:24)]
names(data) <- c("Year", "State", "pid", "satis_labels", "satis",
"environ","Stateid","gender","age","emp","fam","CO2Tons","sqkm",
"CO2perSqKm","Emissions")
export(data, file="Broad_Data.csv")
#---------------------------------------------------------#
# Appendix 1: NRW information was missing from statista. Therefore, info on NRW (1990, 1995)
# was taken from UGRdL Gase table (manually inserted into the excel file),
# while the data on other years was extracted (with R) from the AfEE website (from 2000 and on).
# The CO2 emissions for all States are measured in annual per capita indicators, so all Bundeslaender match.
attach(data)
View(data)
remove(data3)
suppressPackageStartupMessages(library(googleVis))
#aggregate yearly emissions data by state
agg <- aggregate(cbind(CO2perSqKm) ~ State + Year, FUN=mean, data=data)
View(agg)
allvar <- aggregate(cbind(CO2perSqKm, satis, environ, GrossIncome) ~ State + Year + Stateid, FUN=mean, data=data)
allvar <- aggregate(cbind(CO2perSqKm, satis, environ) ~ State + Year + Stateid, FUN=mean, data=data)
transform(agg, Year = as.numeric(Year))
#Replace problematic state names
Replace1 <- data.frame(from = c("Baden-W\xcc_rttemberg", "Th\xcc_ringen"), to = c("Baden-Wuerttemberg", "Thueringen"))
allvar <- FindReplace(data=allvar, Var = "Stateid", replaceData = Replace1, from = "from", to = "to",
exact = TRUE, vector = FALSE)
allvar <- FindReplace(data=allvar, Var = "State", replaceData = Replace1, from = "from", to = "to",
exact = TRUE, vector = FALSE)
#create new vector with state codes
Replaces <- data.frame(from = c("Baden-Wuerttemberg", "Bayern", "Bremen", "Berlin", "Brandenburg", "Hamburg" , "Hessen", "Mecklenburg-Vorpommern", "Niedersachsen", "Nordrhein-Westfalen", "Rheinland-Pfalz", "Sachsen", "Sachsen-Anhalt", "Schleswig-Holstein", "Saarland", "Thueringen"), to = c("DE-BW", "DE-BY", "DE-HB", "DE-BE", "DE-BB", "DE-HH", "DE-HE", "DE-MV", "DE-NI", "DE-NW", "DE-RP", "DE-SN", "DE-ST", "DE-SH", "DE-SL", "DE-TH"))
New <- FindReplace(data=allvar, Var = "Stateid", replaceData = Replaces, from = "from", to = "to",
exact = TRUE, vector = FALSE)
New[, c(2,4)] <- sapply(New[, c(2,4)], as.numeric)
geoChartDE <- list(region="DE",
resolution="provinces",
legend="{numberFormat:'#,###.00'}")
Map <- gvisGeoChart(New, locationvar = 'State',
colorvar = 'CO2perSqKm',
options = geoChartDE)
plot(Map)
View(data)
View(data2)
attach(data2)
#changing state names to correspond to GoogleVis provinces codes (Germany)
suppressPackageStartupMessages(library(googleVis))
#aggregate yearly emissions data by state
agg <- aggregate(cbind(CO2perSqKm) ~ State + Year, FUN=mean, data=data2)
allvar <- aggregate(cbind(CO2perSqKm, satis, environ, GrossIncome) ~ State + Year + Stateid, FUN=mean, data=data)
allvar <- aggregate(cbind(CO2perSqKm, satis, environ, GrossIncome) ~ State + Year + Stateid, FUN=mean, data=data2)
View(allvar)
#Transform yearly data to numeric
transform(agg, Year = as.numeric(Year))
#Replace problematic state names
Replace1 <- data.frame(from = c("Baden-W\xcc_rttemberg", "Th\xcc_ringen"), to = c("Baden-Wuerttemberg", "Thueringen"))
allvar <- FindReplace(data=allvar, Var = "Stateid", replaceData = Replace1, from = "from", to = "to",
exact = TRUE, vector = FALSE)
allvar <- FindReplace(data=allvar, Var = "State", replaceData = Replace1, from = "from", to = "to",
exact = TRUE, vector = FALSE)
#create new vector with state codes
Replaces <- data.frame(from = c("Baden-Wuerttemberg", "Bayern", "Bremen", "Berlin", "Brandenburg", "Hamburg" , "Hessen", "Mecklenburg-Vorpommern", "Niedersachsen", "Nordrhein-Westfalen", "Rheinland-Pfalz", "Sachsen", "Sachsen-Anhalt", "Schleswig-Holstein", "Saarland", "Thueringen"), to = c("DE-BW", "DE-BY", "DE-HB", "DE-BE", "DE-BB", "DE-HH", "DE-HE", "DE-MV", "DE-NI", "DE-NW", "DE-RP", "DE-SN", "DE-ST", "DE-SH", "DE-SL", "DE-TH"))
New <- FindReplace(data=allvar, Var = "Stateid", replaceData = Replaces, from = "from", to = "to",
exact = TRUE, vector = FALSE)
New[, c(2,4)] <- sapply(New[, c(2,4)], as.numeric)
## Create Geo Charts option code for geovis plot
geoChartDE <- list(region="DE",
resolution="provinces",
legend="{numberFormat:'#,###.00'}")
View(New)
latestyear <- New[ which(New$Year=='2012'),]
View(latestyear)
Map <- gvisGeoChart(latestyear, locationvar = 'State',
colorvar = 'CO2perSqKm',
options = geoChartDE)
plot(Map)
Map <- gvisGeoChart(latestyear, locationvar = 'Stateid',
colorvar = 'CO2perSqKm',
options = geoChartDE)
plot(Map)
latestyear <- New[ which(New$Year=='2011'),]
Map <- gvisGeoChart(latestyear, locationvar = 'Stateid',
colorvar = 'CO2perSqKm',
options = geoChartDE)
plot(Map)
year2010 <- New[ which(New$Year=='2010'),]
Map <- gvisGeoChart(year2010, locationvar = 'Stateid',
colorvar = 'CO2perSqKm',
options = geoChartDE)
plot(Map)
Map <- gvisGeoChart(year2010, locationvar = 'Stateid',
colorvar = 'CO2perSqKm',
options = geoChartDE)
plot(Map)
Map <- gvisGeoChart(New, locationvar = 'Stateid',
colorvar = 'CO2perSqKm',
options = geoChartDE)
plot(Map)
# Plot map of
## Get data from from the World Bank for country codes
wbData <- WDI(country="all", indicator=c("SP.DYN.LE00.IN",
"SP.POP.TOTL"), start=1960, end=2011,
extra=FALSE)
names(wbData) <- c("country", "iso2c", "year", "life.expectancy",
"population")
worlddata <- read.csv("CO2_Data.csv")
attach(worlddata)
## Get country mappings from World Bank
getWorldBankCountries <- function(){
wbCountries <-
fromJSON("http://api.worldbank.org/countries?per_page=12000&format=json")
wbCountries <- data.frame(t(sapply(wbCountries[[2]], unlist)))
wbCountries$longitude <- as.numeric(wbCountries$longitude)
wbCountries$latitude <- as.numeric(wbCountries$latitude)
levels(wbCountries$region.value) <- gsub(" \\(all income levels\\)",
"", levels(wbCountries$region.value))
return(wbCountries)
}
## Get country mappings
wbCountries <- getWorldBankCountries()
total <- merge(wbCountries, worlddata,
by.x="name", by.y="Country")
names(total) <- c("country", "id", "iso2Code", "RegionID", "RegionValue", "ID2", "Region", "Income.Level.ID", "IncomeLevel", "LendingType", "LendingValue", "Capital", "Longitude", "Latitude", "CO2EmissionsMt", "NotA", "ChangeSince1990", "NotB", "CO2perCapita", "NotC", "CO2perSquareKM", "NotD")
#set geochart options
geoChartworld <- list(region="world",
resolution="countries",
legend="{numberFormat:'#,###.00'}")
#plot world emissions
WorldMap <- gvisGeoChart(total, locationvar = 'iso2Code',
colorvar = 'CO2perSquareKM',
options = geoChartworld)
total <- merge(wbCountries, worlddata,
by.x="name", by.y="Country")
wbData <- WDI(country="all", indicator=c("SP.DYN.LE00.IN",
"SP.POP.TOTL"), start=1960, end=2011,
extra=FALSE)
names(wbData) <- c("country", "iso2c", "year", "life.expectancy",
"population")
worlddata <- read.csv("CO2_Data.csv")
setwd("~/Documents/Hertie 2016/Collaborative Social Science Data/Research Project/GitHub/Climate-Happiness")
## Get data from from the World Bank for country codes
wbData <- WDI(country="all", indicator=c("SP.DYN.LE00.IN",
"SP.POP.TOTL"), start=1960, end=2011,
extra=FALSE)
names(wbData) <- c("country", "iso2c", "year", "life.expectancy",
"population")
worlddata <- read.csv("CO2_Data.csv")
attach(worlddata)
## Get country mappings from World Bank
getWorldBankCountries <- function(){
wbCountries <-
fromJSON("http://api.worldbank.org/countries?per_page=12000&format=json")
wbCountries <- data.frame(t(sapply(wbCountries[[2]], unlist)))
wbCountries$longitude <- as.numeric(wbCountries$longitude)
wbCountries$latitude <- as.numeric(wbCountries$latitude)
levels(wbCountries$region.value) <- gsub(" \\(all income levels\\)",
"", levels(wbCountries$region.value))
return(wbCountries)
}
## Get country mappings
wbCountries <- getWorldBankCountries()
total <- merge(wbCountries, worlddata,
by.x="name", by.y="Country")
names(total) <- c("country", "id", "iso2Code", "RegionID", "RegionValue", "ID2", "Region", "Income.Level.ID", "IncomeLevel", "LendingType", "LendingValue", "Capital", "Longitude", "Latitude", "CO2EmissionsMt", "NotA", "ChangeSince1990", "NotB", "CO2perCapita", "NotC", "CO2perSquareKM", "NotD")
#set geochart options
geoChartworld <- list(region="world",
resolution="countries",
legend="{numberFormat:'#,###.00'}")
#plot world emissions
WorldMap <- gvisGeoChart(total, locationvar = 'iso2Code',
colorvar = 'CO2perSquareKM',
options = geoChartworld)
old.par <- par(mfrow=c(1, 3))
plot(Map, tag = 'chart')
geoChartEur <- list(region="150",
resolution="countries",
legend="{numberFormat:'#,###.00'}")
WorldMap <- gvisGeoChart(total, locationvar = 'iso2Code',
colorvar = 'CO2perSquareKM',
options = geoChartEur)
geoChartEur <- list(region="150",
resolution="countries",
legend="{numberFormat:'#,###.00'}",
width=400,
height=450)
WorldMap <- gvisGeoChart(total, locationvar = 'iso2Code',
colorvar = 'CO2perSquareKM',
options = geoChartEur)
plot(WorldMap)
geoChartDE <- list(region="DE",
resolution="provinces",
legend="{numberFormat:'#,###.00'}",
width=400,
height=450)
plot(Map)
possibles <- c('~/GitHub/Climate-Happiness/',
'~/Documents/Hertie 2016/Collaborative Social Science Data/Research Project/GitHub/Climate-Happiness/')
library(DataCombine)
set_valid_wd(possibles)
setwd("~/Documents/Hertie 2016/Collaborative Social Science Data/Research Project/GitHub/Climate-Happiness")
setwd("~/Documents/Hertie 2016/Collaborative Social Science Data/Research Project/GitHub/Climate-Happiness")
possibles <- c('~/GitHub/Climate-Happiness/',
'~/Documents/Hertie 2016/Collaborative Social Science Data/Research Project/GitHub/Climate-Happiness/')
setwd(possibles)
possibles <- c('~/GitHub/Climate-Happiness/',
'~/Documents/Hertie 2016/Collaborative Social Science Data/Research Project/GitHub/Climate-Happiness/')
set_valid_wd(possibles)
