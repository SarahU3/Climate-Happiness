}
for(i in variables)
{
xLabel <- paste(var.labels[i])
hist(variables[, i],
main=paste("Distribution of", xLabel),
xlab=xLabel)
}
for(i in variables)
{
xLabel <- paste(var.labels[i])
hist(variables[i],
main=paste("Distribution of", xLabel),
xlab=xLabel)
}
for(i in variables)
{
dev.new()
xLabel <- paste(var.labels[i])
hist(variables[i],
main=paste("Distribution of", xLabel),
xlab=xLabel)
}
attach (mtcars)
par(mfrow=c(2,2))
hist(mpg)
hist(wt)
hist(carb)
hist(hp)
attach (mtcars)
par(mfrow=c(2,2))
hist(mpg)
hist(wt)
hist(carb)
hist(hp)
attach (mtcars)
par(mfrow=c(2,2))
hist(mpg)
hist(wt)
hist(carb)
hist(hp)
attach (mtcars)
par(mfrow=c(1,3))
hist(wt)
hist(carb)
hist(hp)
hist(wt, main=paste(var.labels[wt]))
hist(wt, main=paste(var.labels[2]))
hist(wt, main=paste(var.labels["wt"]))
par(mfrow=c(1,3))
hist(wt, main=paste(var.labels["wt"]))
hist(carb, main=paste(var.labels["carb"]))
hist(hp, main=paste(var.labels["hp"]))
library(ggplot2)
library(reshape2)
ggplot(melt(mtcars),aes(x=value)) + geom_histogram() + facet_wrap(~variable)
ggplot(melt(mtcars),aes(x=value)) + geom_histogram() + facet_wrap(~variable)
boxplot(mtcars$mpg~mtcars$am, las=2, col=c("yellow", "red"), ylab="Miles per gallon (mpg)", main="Distribution of mpg") # creating boxplots for automatic vs manual cars
?par(mfrow)
attach(mtcars)
par(mfrow=c(1,3))
plot(wt,mpg, main="Weight vs. speed (mpg)")
plot(carb,mpg, main="Carburetors vs. speed (mpg)")
plot(hp, mpg, main="Horsepower vs. speed (mpg)")
title("Boxplots of variables of interest", outer=TRUE)
attach(mtcars)
par(mfrow=c(1,3))
boxplot(wt, col="blue", xlab="Weight")
boxplot(carb, col="yellow", xlab="Carburetors")
boxplot(hp, col="cyan", xlab="Horsepower")
title("Boxplots of variables of interest", outer=TRUE)
ggplot(melt(mtcars),aes(x=value)) + geom_histogram() + facet_wrap(~variable)
ggplot(melt(mtcars),aes(x=value)) + geom_histogram() + facet_wrap(~variable) +xlim(min,max)
ggplot(melt(mtcars),aes(x=value)) + geom_histogram() + facet_wrap(~variable) +xlim(min,max)
ggplot(melt(mtcars),aes(x=value)) + geom_histogram() + facet_wrap(~variable) +xlim(min,max)
ggplot(melt(mtcars),aes(x=value)) + geom_histogram() + facet_wrap(~variable) +xlim(min,max)
ggplot(melt(mtcars),aes(x=value, xlim(min, max)) + geom_histogram() + facet_wrap(~variable)
ggplot(melt(mtcars),aes(x=value) + geom_histogram() + facet_wrap(~variable)
ggplot(melt(mtcars),aes(x=value)) + geom_histogram() + facet_wrap(~variable)
ggplot(melt(mtcars),aes(x=value)) + geom_histogram() + facet_wrap(~variable) +xlim(min,max)
ggplot(melt(wt),aes(x=value)) + geom_histogram() + facet_wrap(~variable) +xlim(min,max)
View(USArrests)
?mtcars
library(rvest)
library(dplyr)
install.packages("rvest")
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
### 14/03/2016, Session 5 ###
URL
URL <- 'http://news.bbc.co.uk/2/hi/uk_news/politics/8044207.stm'
ExpensesTable <- URL %>% read_html() %>%
html_nodes('#expenses_table') %>%
html_table() %>%
as.data.frame
library(rvest)
ExpensesTable <- URL %>% read_html() %>%
html_nodes('#expenses_table') %>%
html_table() %>%
as.data.frame
View(ExpensesTable)
library(randomNames)
library(dplyr)
library(tidyr)
install.packages("randomNames")
library(randomNames)
library(dplyr)
library(tidyr)
library(randomNames)
library(dplyr)
library(tidyr)
people <- randomNames(n = 1000)
people <- sort(rep(people, 4))
year <- rep(2010:2013, 1000)
trend_income <- c(30000, 31000, 32000, 33000)
income <-  replicate(trend_income + rnorm(4, sd = 20000),
n = 1000) %>%
data.frame() %>%
gather(obs, value, X1:X1000)
income$value[income$value < 0] <- 0
data <- data.frame(people, year, income = income$value)
higher_income <- filter(data, income > 60000)
head(higher_income)
group_data <- group_by(data, people)
head(group_data)[1:5, ]
min_max_income <- summarize(group_data,
min_income = min(income),
m
min_max_income <- summarize(group_data,
min_income = min(income),
max_income = max(income))
head(min_max_income)[1:3, ]
min_max_income <- summarize(group_data,
min_income = min(income),
max_income = max(income))
head(min_max_income)[1:3, ]
descending <- arrange(min_max_income, desc(max_income))
head(descending)[1:3, ]
MedalTable <- BBC %>% read_html() %>%
html_nodes('Medal Table') %>%
html_table() %>%
as.data.frame
BBC <- 'http://www.bbc.com/sport/winter-olympics/2014/medals/countries'
MedalTable <- BBC %>% read_html() %>%
html_nodes('Medal Table') %>%
html_table() %>%
as.data.frame
View(data)
View(MedalTable)
MedalTable <- BBC %>% read_html() %>%
html_nodes('Medal.Table') %>%
html_table() %>%
as.data.frame
MedalTable <- BBC %>% read_html() %>%
html_nodes('.medals-table__wrapper') %>%
html_table() %>%
as.data.frame
MedalTable <- BBC %>% read_html() %>%
html_nodes('.medals-table__wrapper') %>%
html_table() %>%
as.data.frame
MedalTable <- BBC %>% read_html() %>%
html_nodes(xpath='.medals-table__wrapper') %>%
html_table() %>%
as.data.frame
MedalTable <- BBC %>% read_html() %>%
html_nodes(xpath='//.medals-table__wrapper') %>%
html_table() %>%
as.data.frame
MedalTable <- BBC %>% read_html() %>%
html_nodes(xpath='//*[contains(concat( " ", @class, " " ), concat( " ", "medals-table__wrapper", " " ))]') %>%
html_table() %>%
as.data.frame
MedalTable <- BBC %>%
html() %>%
html_nodes(xpath='//*[contains(concat( " ", @class, " " ), concat( " ", "medals-table__wrapper", " " ))]') %>%
html_table()
MedalTable <- BBC %>% read_html() %>%
html_nodes(xpath='//*[contains(concat( " ", @class, " " ), concat( " ", "medals-table__wrapper", " " ))]') %>%
html_table()
MedalTable <- BBC %>% read_html() %>%
html_nodes(xpath='//*[contains(concat( " ", @class, " " ), concat( " ", "medals-table__wrapper", " " ))]') %>%
MedalTable <- BBC %>% read_html() %>%
html_nodes(xpath='//*[contains(concat( " ", @class, " " ), concat( " ", "medals-table__wrapper", " " ))]')
MedalTable <- BBC %>% read_html() %>%
html_nodes(xpath='//*[contains(concat( " ", @class, " " ), concat( " ", "medals-table__wrapper", " " ))]')
BBC <- 'http://www.bbc.com/sport/winter-olympics/2014/medals/countries'
MedalTable <- BBC %>% read_html() %>%
html_nodes(xpath='//*[contains(concat( " ", @class, " " ), concat( " ", "medals-table__wrapper", " " ))]')
html_table()
MedalTable <- BBC %>% read_html() %>%
html_nodes(xpath='//*[contains(concat( " ", @class, " " ), concat( " ", "medals-table__wrapper", " " ))]') %>%
html_table()
MedalTable <- BBC %>% read_html() %>%
html_nodes(xpath='//*[@id="sport"]/div[2]/div[2]/div/div[1]/div/section') %>%
html_table()
MedalTable <- BBC %>% read_html() %>%
html_nodes(xpath='//*[@id="sport"]/div[2]/div[2]/div/div[1]/div/section/div[2]') %>%
html_table()
MedalTable <- BBC %>% read_html() %>%
html_nodes(xpath='//*[@id="sport"]/div[2]/div[2]/div/div[1]/div/section/div[2]/table') %>%
html_table()
MedalTable <- BBC %>% read_html() %>%
html_nodes(xpath='//*[@id="sport"]/div[2]/div[2]/div/div[1]/div/section/div[2]/table') %>%
html_table() %>%
as.data.frame
View(MedalTable)
MedalTable <- BBC %>% read_html() %>% html_nodes('//*[contains(concat( " ", @class, " " ), concat( " ", "medals-table__wrapper", " " ))]') %>% html_table()
View(MedalTable)
head (MedalTable)
min_max_income <- summarize(MedalTable,
min_medals = min(Total),
max_income = max(Total))
min_max_Total <- summarize(MedalTable,
min_medals = min(Total),
max_income = max(Total))
head(min_max_income)[1:3, ]
descending <- arrange(min_max_Total, desc(max_Total))
head(descending)[1:26, ]
min_max_medals <- summarize(MedalTable,
min_medals = min(Total),
max_medals = max(Total))
descending <- arrange(min_max_medals, desc(max_medals))
head(descending)[1:26, ]
View(MedalTable)
descending <- arrange(min_max_medals, desc(max_medals))
head(descending)[26:1, ]
descending <- arrange(Total, desc(max_medals))
head(descending)[26:1, ]
descending <- arrange(Total, desc(Total))
head(descending)[26:1, ]
descending <- arrange(Total, desc(max(Total))
head(descending)[1:, ]
head(min_max_medals)
attach (MedalTable)
sort.medal <- MedalTable[order(Country, -Total) , ]
sort.medal[1:10, ]
sort.medal
View(sort.medal)
sort.medal <- MedalTable[order(-Total) , ]
sort.medal
View(sort.medal)
URL <- 'http://www.ats.ucla.edu/stat/data/binary.csv'
Admission <- read.csv(URL)
# Estimate model
Logit1 <- glm(admit ~ gre + gpa + as.factor(rank),
data = Admission, family = 'binomial')
# Create fitted data
fitted <- with(Admission,
data.frame(gre = mean(gre),
gpa = mean(gpa),
rank = factor(1:4)))
View(Admission)
View(fitted)
library(devtools)
library(ggplot2)
source_url("http://bit.ly/OTWEGS")
install.packages ("WDI")
library (WDI)
source_url("http://bit.ly/OTWEGS")
install.packages("countrycode")
library(countrycode)
source_url("http://bit.ly/OTWEGS")
install.packages("gdata")
library(gdata)
source_url("http://bit.ly/OTWEGS")
InfantNoMiss <- subset(MortalityGDP,
!is.na(InfantMortality))
# Create High/Low Income Variable
InfantNoMiss$DumMort[InfantNoMiss$InfantMortality
>= 15] <- "high"
InfantNoMiss$DumMort[InfantNoMiss$InfantMortality
< 15] <- "low"
ggplot(data = MortalityGDP, aes(x = InfantMortality,
y = GDPperCapita)) + geom_point()
ggplot(data = InfantNoMiss, aes(log(InfantMortality),
log(GDPperCapita))) +
geom_point(aes(colour = income)) +
theme_bw()
library(knitr)
install.packages("stargazer")
library(stargazer)
library(stargazer)
BAS <- read.xlsx("C:\Users\meerim\Documents\Hertie 2015\Master thesis\SBS data\BAS evaluated projects_stata.xls", 1, sheetName = "KR ERed Projects for Meerim 111")
BAS <- read.xlsx("C:/Users/meerim/Documents/Hertie 2015/Master thesis/SBS data/BAS evaluated projects_stata.xls", 1, sheetName = "KR ERed Projects for Meerim 111")
install.packages("xlsx")
library(xlsx)
BAS <- read.xlsx("C:/Users/meerim/Documents/Hertie 2015/Master thesis/SBS data/BAS evaluated projects_stata.xls", 1, sheetName = "KR ERed Projects for Meerim 111")
library(xlsx)
install.packages("rJava")
library(xlsx)
library(rJava)
library(rJava)
library(xlsx)
BAS <- read.csv("C:/Users/meerim/Documents/Hertie 2015/Master thesis/SBS data/BAS evaluated projects_stata.csv", header=TRUE,
sep=",", row.names="id")
BAS <- read.table("C:/Users/meerim/Documents/Hertie 2015/Master thesis/SBS data/BAS evaluated projects_stata.csv", header=TRUE,
sep=",", row.names="id")
library(xlsx)
install.packages("gdata")
install.packages("gdata")
library(gdata)
BAS <- read.xls("C:/Users/meerim/Documents/Hertie 2015/Master thesis/SBS data/BAS evaluated projects_stata.xls", 1)
BAS <- read.xls("C:/Users/meerim/Documents/Hertie 2015/Master thesis/SBS data/BAS evaluated projects_stata.xls")
BAS=read.xls("C:/Users/meerim/Documents/Hertie 2015/Master thesis/SBS data/BAS evaluated projects_stata.xls")
library(gdata)
BAS=read.xls("C:/Users/meerim/Documents/Hertie 2015/Master thesis/SBS data/BAS evaluated projects_stata.xls")
BAS <- read.xls("C:/Users/meerim/Documents/Hertie 2015/Master thesis/SBS data/BAS evaluated projects_stata.xls", perl = "C:\\Perl\\bin\\perl.exe")
library(gdata)
perl <- "C:\Strawberry\perl\bin\perl5.22.1.exe"
BAS <- read.xls("C:/Users/meerim/Documents/Hertie 2015/Master thesis/SBS data/BAS evaluated projects_stata.xls", perl=perl)
perl <- "C:/Strawberry/perl/bin/perl5.22.1.exe"
BAS <- read.xls("C:/Users/meerim/Documents/Hertie 2015/Master thesis/SBS data/BAS evaluated projects_stata.xls", perl=perl)
View(BAS)
names(BAS)
M1 <- lm(Adjturnover1 ~ BAS.grant.., data=BAS)
kable(M1)
library(knitr)
type = 'response')
kable(M1)
summary M1
summary (M1)
M1 <- glm(Adjturnover1 ~ BAS.grant.., data=BAS)
data(BAS)
M1 <- glm(Adjturnover1 ~ BAS.grant.., data=BAS)
data(BAS)
M1 <- lm(Adjturnover1 ~ BAS.grant.., data=BAS)
summary (BAS)
View(BAS)
M1 <- lm(Adjturnover1 ~ Adj..BAS.cost, data=BAS)
M1 <- lm(Adjturnover1 ~ Adj..BAS.cost + Employee1, data=BAS)
M1 <- lm(Adjturnover1 ~ Employee1, data=BAS)
M1 <- glm(Adjturnover1 ~ Employee1, data=BAS, family="binomial")
kable(M1)
fitted$predicted <- glm(Adjturnover1 ~ Employee1, data=BAS, family="binomial")
kable(M1)
fitted$predicted <- predict(M1, newdata=fitted, type="response")
kable(fitted)
fitted$predicted <- predict(M1, newdata=fitted, type="response")
stargazer::stargazer(M1, title = 'Logistic Regression Estimates of Grad School Acceptance',
digits = 2, type = 'html')
stargazer::stargazer(M1, title = 'Logistic Regression Estimates of Grad School Acceptance',
digits = 2, type = 'pdf')
stargazer::stargazer(M1, title = 'Logistic Regression Estimates of Grad School Acceptance',
digits = 2, type = 'latex')
install.packages('utils')
install.packages("utils")
install.packages("utils")
install.packages("utils")
install.packages("utils")
mydestfile <- 'C:\Users\meerim\Links\Downloads.lnk'
mydestfile <- "C:\Users\meerim\Links\Downloads.lnk"
mydestfile <- "C:/Users/meerim/Links/Downloads.lnk"
URL2 <- 'http://de.statista.com/statistik/daten/studie/255815/umfrage/kohlendioxid-emissionen-je-einwohner-in-berlin/'
download.file(URL2, mydestfile, mode="wb")
mydestfile <- "C:/Users/meerim/Links/Downloads"
URL2 <- 'http://de.statista.com/statistik/daten/studie/255815/umfrage/kohlendioxid-emissionen-je-einwohner-in-berlin/'
download.file(URL2, mydestfile, mode="wb")
mydestfile <- "C:/Users/meerim/Documents"
library(rvest)
URL2 <- 'http://de.statista.com/statistik/daten/studie/255815/umfrage/kohlendioxid-emissionen-je-einwohner-in-berlin/'
download.file(URL2, mydestfile, mode="wb")
mydestfile <- "C:\Users\meerim\Documents\R"
URL2 <- 'http://de.statista.com/statistik/daten/studie/255815/umfrage/kohlendioxid-emissionen-je-einwohner-in-berlin/'
download.file(URL2, mydestfile, mode="wb")
library(repmis)
install.packages('repmis')
source_XlsxData(URL2, sheet1, sha1=NULL, cache=FALSE, clearCache=FALSE, read.xls)
library(rvest)
library(dplyr)
library(repmis)
URL2 <- 'http://de.statista.com/statistik/daten/studie/255815/umfrage/kohlendioxid-emissionen-je-einwohner-in-berlin/'
source_XlsxData(URL2, sheet1, sha1=NULL, cache=FALSE, clearCache=FALSE)
library(repmis)
library(dplyr)
library(car) #scatterplots with panel data
library(httr)
library(foreign) #to read .dta files
library(rJava) # necessary for xlsxjar package
library(xlsxjars) # necessary for xlsx package
library(xlsx) # to read xls files
library(ggplot2)
library(tidyr) # tidy tables
library(repmis)
library(rio) # export files from R
library(XML) # read URL links
library(xml2)
library(rvest) # exporting tables
library(psych) # multilevel analysis
library(plm) # panel data regression
library(gsubfn) # replacing characters
library(multilevel) # multilevel analysis
library(nlme) # GLM models
setwd('~/GitHub/Climate-Happiness/Data')
URLnrg <- 'http://www.lanuv.nrw.de/liki/index.php?indikator=608&aufzu=1&mode=indi'
# BUT manually downloaded Excel spreadsheets
messynrgprime <- read.xlsx(file.path("Energy", "export_land_primary.xlsx"), sheetIndex=1, startRow = 4, endRow = 21)
messynrgelec <- read.xlsx(file.path("Energy","export_land_strom.xlsx"), sheetIndex=1, startRow = 4, endRow = 21)
messynrguse <- read.xlsx(file.path("Energy","export_land_energyuse.xlsx"), sheetIndex=1, startRow = 4, endRow = 21)
# Convert K.D. (keine Daten) to NA
tidynrguse <- as.data.frame(sapply(messynrguse,
gsub, pattern="K.D.", replacement="."))
tidynrgelec <- as.data.frame(sapply(messynrgelec,
gsub, pattern="K.D.", replacement="."))
tidynrgprime <- as.data.frame(sapply(messynrgprime,
gsub, pattern="K.D.", replacement="."))
# Transform to numeric values, need to correct decimal places and loop but major issue: , instead of .
transform(tidynrgelec, X1990 = as.numeric(X1990))
# Convert data to tidy format (one variable per column) currently doesn't work bc they're not numerical
NRGprime <- gather(tidynrgprime, year, percentrenewable, 2:25, na.rm = FALSE, convert = TRUE)
NRGelec <- gather(tidynrgelec, year, percentrenewable, 2:25, na.rm = FALSE, convert = TRUE)
NRGuse <- gather(tidynrguse, year, percentrenewable, 2:26, na.rm = FALSE, convert = TRUE)
# Matching labels
colnames(NRGelec) <- c("State", "Year", "Elec")
colnames(NRGprime) <- c("State", "Year", "Primary")
colnames(NRGuse) <- c("State", "Year", "Use")
NRG <- merge(NRGprime, NRGelec, by=c("Year","State"))
NRG2 <- merge(NRG, NRGuse, by=c("Year","State"))
# Merge and export data files into cvs
NRG.final <- as.data.frame(sapply(NRG2, gsub, pattern="X",replacement=""))
export(NRG.final, file="NRG.final.csv")
#----------------------------------------------------------#
### 3. Data for Bundeslaender CO2 emissions (Source: Statista, UGRdL, & AfEE) ###
# Merging files using file name pattern (all States are covered except NRW)
all_files <- list.files(path='Emissions', pattern="statistic_id")
all_subbed <- NULL
# Cleaning in a loop
for (i in all_files) {
message(i)
if (grepl(pattern = '.xls$', x = i)) {
message('Skipped')
}
else if (grepl(pattern = '.xlsx', x = i)) {
# Load individual document in to R as a list
temp_all <- read.xlsx(i, sheetIndex=2, header=FALSE)
temp_bundesland <- read.xlsx(i, sheetIndex=2, startRow=3, colIndex=2:2, endRow=3, header=FALSE)
temp_data <- read.xlsx(i, sheetIndex=2, startRow=6, header=FALSE)
# Extract specific cell for the name of the state
names(temp_data) <- c('Year', 'Emissions')
temp_data$State <- paste(temp_bundesland[1,1])
# Bind individual project to main data frame
all_subbed <- rbind(all_subbed, temp_data)
}
}
# Save as .csv
export(all_subbed, file = 'Emissions_cleaned.csv')
# # EXTRA: Cleaning individual file
# data <- read.xlsx2(all_files[3], sheetIndex=2, startRow=6, header=FALSE)
# colnames(data) <- c("Year", "Emissions")
# test <- read.xlsx(all_files[3], sheetIndex=2, startRow=3, colIndex=2:2, endRow=3, header=FALSE)
# data$Bundesland <- paste(test[1,1]) #create a new column with same values for all rows
# Extract missing info on NRW, while also modifying the excel file (see Appendix 1)
all.link <- 'http://www.ugrdl.de/tab34.htm'
Gase.table = readHTMLTable(all.link, header=T, which=1, stringsAsFactors=F)
names(Gase.table) <- c("State", "1990", "1995", "2000", "2005", "2010", "2011", "2011*", "2012")
export(Gase.table, file = 'Gase.csv')
# Merging CO2 files
NRW <- read.csv(file.path("Emissions", 'NRW.csv'), header=TRUE) #original file was amended by combining data from "Gase" and "foederal_erneuerbar-Wirtschaft_Datenblatt"
general <- rbind(all_subbed, NRW)
# Cleaning up names
Final <- as.data.frame(sapply(general,
gsub, pattern="Kohlendioxid-Emissionen je Einwohner im |Kohlendioxid-Emissionen je Einwohner in | bis 2012| bis 2010| bis 2011|\\**",replacement=""))
export(Final, file="Emissions_Final.csv") ## has no extra words
## | means "and", //is used for special characteristics such as *
#---------------------------------------------------------#
### 4. Merging GSOEP, Emissions and Energy files
# Tranforming GSOEP dta file to csv for merging (Source:DIW)
GSOEP = read.dta(file.path("GSOEP", "SOEP_short12.dta"))
# And then you simply write it to CSV
write.csv(GSOEP, file = "GSOEP.csv", row.names = FALSE)
# Read all files to be merged together
emissions = read.csv("Emissions_Final.csv")
GSOEP = read.csv("GSOEP.csv")
energy = read.csv("NRG.final.csv")
# Merge all 3 files together using State and Year as unique IDs
alldata <- merge(emissions,energy,by=c("Year","State"))
finaldata = merge(alldata,GSOEP,by=c("Year","State"))
Stateid <- factor(finaldata$State, levels=c(levels(finaldata$State)))
finaldata$Stateid <- c(as.numeric(Stateid))
Stateid
levels$Stateid
levels(finaldata$Stateid)
summary(finaldata$Stateid)
summarize(finaldata$Stateid)
summarise(finaldata$Stateid)
summarize(finaldata$Stateid, numeric)
summarize(finaldata$Stateid, c('numeric'))
library(psych)
describe(finaldata$Stateid)
summarize(Stateid, data=finaldata)
levels(finaldata$State)
levels(finaldata$Stateid)
ls(finaldata$Stateid)
describe(finaldata$Stateid)
Stateid
levels(Stateid)
names(Stateid)
names(finaldata$Stateid)
attach(finaldata)
ses.f <- factor(State, levels = c(levels(State)))
ses.f
levels(ses.f)
table(Stateid, State)
str(Stateid)
str(State)
summarise(Stateid)
mean(Stateid)
is.numeric.Stateid
is.numeric(Stateid)
finaldata$Stateid <- c(as.numeric(Stateid))
is.numeric(Stateid)
