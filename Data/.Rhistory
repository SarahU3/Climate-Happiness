as.numeric(finaldata$environ)
View(finaldata)
rm(finaldata$test)
rm(test)
rm(test1)
lm(satis~environ)
attach(finaldata)
lm(satis~environ)
finaldata$env <- as.numric(finaldata$enviro)
finaldata$env <- as.numeric(finaldata$enviro)
finaldata$env <- as.numeric(finaldata$environ)
lm(satis~env)
Null.Model<-lme(satis~1,random=~1|Stateid,data=data,
control=list(opt="optim"))
data(bh1996)
View(bh1996)
is.factor(bh1996$GRP)
is.numeric(satis)
is.numeric(emissions)
is.numeric(Emissions)
is.numeric(finaldata$Emissions)
is.factor(Emissions)
summarize(Emissions)
summary(Emissions)
glm(satis~environ)
sapply(finaldata, mode)
sapply(finaldata, class)
sapply(finaldata, mode)
sapply(finaldata, class)
setwd('~/GitHub/Climate-Happiness/Data')
source('~/GitHub/Climate-Happiness/Data/SourceFile.R')
data <- read.csv("All_Merged_Data.csv")
attach(data)
Null.Model<-lme(satis~1,random=~1|Stateid,data=data,
control=list(opt="optim"))
VarCorr(Null.Model)
View(finaldata)
GREL.DAT<-GmeanRel(Null.Model)
names(GREL.DAT)
mean(GREL.DAT$MeanRel)
Null.Model.2<-gls(satis~1,data=data,
control=list(opt="optim"))
logLik(Null.Model.2)*-2
logLik(Null.Model)*-2
sigtest <- round((logLik(Null.Model.2)*-2)-(logLik(Null.Model)*-2), digits=3)
Model.1<-lme(satis~environ+Emissions,random=~1|Stateid,data=finaldata,
control=list(opt="optim"))
summary(Model.1)
Model.1<-lme(satis~environ+Emissions,random=~1|Stateid,data=finaldata, control=list(opt="optim"))
Model.1<-lme(satis~environ+Emissions,random=~1|Stateid,data=finaldata,
control=list(opt="optim"))
source('~/GitHub/Climate-Happiness/Data/SourceFile.R')
attach(finaldata)
Null.Model<-lme(satis~1,random=~1|Stateid, data=finaldata,
control=list(opt="optim"))
Null.Model.2<-gls(satis~1,data=finaldata,
control=list(opt="optim"))
Null.Model<-lme(satis~1,random=~1|Stateid, data=finaldata,
control=list(opt="optim"))
VarCorr(Null.Model)
Model.1<-lme(satis~environ+Emissions,random=~1|Stateid,data=finaldata,
control=list(opt="optim"))
summary(Model.1)
Model.2<-lme(satis~environ+Emissions+age+fam+gender+emp,random=~environ+age+fam+gender+emp|Stateid,data=finaldata,
control=list(opt="optim"))
summary(Model.1)
Model.1<-lme(satis~env+Emissions,random=~1|Stateid,data=finaldata,
control=list(opt="optim"))
library(dplyr)
library(car) #scatterplots with panel data
library(httr)
library(foreign) #to read .dta files
library(rJava) # necessary for xlsxjar package
library(xlsxjars) # necessary for xlsx package
library(xlsx) # to read xls files
library(ggplot2)
library(tidyr) # tidy tables
library(repmis)
library(rio) # export files from R
library(XML) # read URL links
library(xml2)
library(rvest) # exporting tables
library(psych) # multilevel analysis
library(plm) # panel data regression
library(gsubfn) # replacing characters
library(multilevel) # multilevel analysis
library(nlme) # GLM models
# Setting relative path
getwd()
setwd('~/GitHub/Climate-Happiness/Data')
#----------------------------------------------------------#
### 2. Data on renewable energy in Bundeslaender (Source: LIKI) ###
URLnrg <- 'http://www.lanuv.nrw.de/liki/index.php?indikator=608&aufzu=1&mode=indi'
# BUT manually downloaded Excel spreadsheets
messynrgprime <- read.xlsx(file.path("Energy", "export_land_primary.xlsx"), sheetIndex=1, startRow = 4, endRow = 21)
messynrgelec <- read.xlsx(file.path("Energy","export_land_strom.xlsx"), sheetIndex=1, startRow = 4, endRow = 21)
messynrguse <- read.xlsx(file.path("Energy","export_land_energyuse.xlsx"), sheetIndex=1, startRow = 4, endRow = 21)
# Convert K.D. (keine Daten) to NA
tidynrguse <- as.data.frame(sapply(messynrguse,
gsub, pattern="K.D.", replacement="."))
tidynrgelec <- as.data.frame(sapply(messynrgelec,
gsub, pattern="K.D.", replacement="."))
tidynrgprime <- as.data.frame(sapply(messynrgprime,
gsub, pattern="K.D.", replacement="."))
# Transform to numeric values, need to correct decimal places and loop but major issue: , instead of .
transform(tidynrgelec, X1990 = as.numeric(X1990))
# Convert data to tidy format (one variable per column) currently doesn't work bc they're not numerical
NRGprime <- gather(tidynrgprime, year, percentrenewable, 2:25, na.rm = FALSE, convert = TRUE)
NRGelec <- gather(tidynrgelec, year, percentrenewable, 2:25, na.rm = FALSE, convert = TRUE)
NRGuse <- gather(tidynrguse, year, percentrenewable, 2:26, na.rm = FALSE, convert = TRUE)
# Matching labels
colnames(NRGelec) <- c("State", "Year", "Elec")
colnames(NRGprime) <- c("State", "Year", "Primary")
colnames(NRGuse) <- c("State", "Year", "Use")
NRG <- merge(NRGprime, NRGelec, by=c("Year","State"))
NRG2 <- merge(NRG, NRGuse, by=c("Year","State"))
# Merge and export data files into cvs
NRG.final <- as.data.frame(sapply(NRG2, gsub, pattern="X",replacement=""))
export(NRG.final, file="NRG.final.csv")
#----------------------------------------------------------#
### 3. Data for Bundeslaender CO2 emissions (Source: Statista, UGRdL, & AfEE) ###
# Merging files using file name pattern (all States are covered except NRW)
all_files <- list.files(path='Emissions', pattern="statistic_id")
all_subbed <- NULL
# Cleaning in a loop
for (i in all_files) {
message(i)
if (grepl(pattern = '.xls$', x = i)) {
message('Skipped')
}
else if (grepl(pattern = '.xlsx', x = i)) {
# Load individual document in to R as a list
temp_all <- read.xlsx(i, sheetIndex=2, header=FALSE)
temp_bundesland <- read.xlsx(i, sheetIndex=2, startRow=3, colIndex=2:2, endRow=3, header=FALSE)
temp_data <- read.xlsx(i, sheetIndex=2, startRow=6, header=FALSE)
# Extract specific cell for the name of the state
names(temp_data) <- c('Year', 'Emissions')
temp_data$State <- paste(temp_bundesland[1,1])
# Bind individual project to main data frame
all_subbed <- rbind(all_subbed, temp_data)
}
}
# Save as .csv
export(all_subbed, file = 'Emissions_cleaned.csv')
# # EXTRA: Cleaning individual file
# data <- read.xlsx2(all_files[3], sheetIndex=2, startRow=6, header=FALSE)
# colnames(data) <- c("Year", "Emissions")
# test <- read.xlsx(all_files[3], sheetIndex=2, startRow=3, colIndex=2:2, endRow=3, header=FALSE)
# data$Bundesland <- paste(test[1,1]) #create a new column with same values for all rows
# Extract missing info on NRW, while also modifying the excel file (see Appendix 1)
all.link <- 'http://www.ugrdl.de/tab34.htm'
Gase.table = readHTMLTable(all.link, header=T, which=1, stringsAsFactors=F)
names(Gase.table) <- c("State", "1990", "1995", "2000", "2005", "2010", "2011", "2011*", "2012")
export(Gase.table, file = 'Gase.csv')
# Merging CO2 files
NRW <- read.csv(file.path("Emissions", 'NRW.csv'), header=TRUE) #original file was amended by combining data from "Gase" and "foederal_erneuerbar-Wirtschaft_Datenblatt"
general <- rbind(all_subbed, NRW)
# Cleaning up names
Final <- as.data.frame(sapply(general,
gsub, pattern="Kohlendioxid-Emissionen je Einwohner im |Kohlendioxid-Emissionen je Einwohner in | bis 2012| bis 2010| bis 2011|\\**",replacement=""))
export(Final, file="Emissions_Final.csv") ## has no extra words
## | means "and", //is used for special characteristics such as *
#---------------------------------------------------------#
### 4. Merging GSOEP, Emissions and Energy files
# Tranforming GSOEP dta file to csv for merging (Source:DIW)
GSOEP = read.dta(file.path("GSOEP", "SOEP_short12.dta"))
# And then you simply write it to CSV
write.csv(GSOEP, file = "GSOEP.csv", row.names = FALSE)
# Read all files to be merged together
emissions = read.csv("Emissions_Final.csv")
GSOEP = read.csv("GSOEP.csv")
energy = read.csv("NRG.final.csv")
# Merge all 3 files together using State and Year as unique IDs
alldata <- merge(emissions,energy,by=c("Year","State"))
finaldata = merge(alldata,GSOEP,by=c("Year","State"))
finaldata <-as.data.frame(sapply(finaldata, gsub, pattern="Ã¼",replacement="ue"))
# XConvert State variable into numeric
finaldata$Stateid <- factor( as.numeric(as.factor(finaldata$State)),
labels = levels(finaldata$State))
Model.1<-lme(satis~environ+Emissions,random=~1|Stateid,data=finaldata,
control=list(opt="optim"))
class(finaldata)
names(finaldata)
finaldata$Stateid <- as.numeric(as.factor(finaldata$State))
Model.1<-lme(satis~environ+Emissions,random=~1|Stateid,data=finaldata,
control=list(opt="optim"))
Null.Model<-lme(satis~1,random=~1|Stateid, data=finaldata,
control=list(opt="optim"))
attach(finaldata)
Null.Model<-lme(satis~1,random=~1|Stateid, data=finaldata,
control=list(opt="optim"))
View(finaldata)
Null.Model<-lme(satis~1,random=~1|Stateid, data=finaldata,
control=list(opt="optim"))
Null.Model.2<-gls(satis~1,data=finaldata,
control=list(opt="optim"))
Null.Model<-lme(satis~1,random=~1|Stateid, data=finaldata,
control=list(opt="optim"))
VarCorr(Null.Model)
finaldata$satis <- as.numeric(finaldata$satis)
Null.Model.2<-gls(satis~1,data=finaldata,
control=list(opt="optim"))
Null.Model<-lme(satis~1,random=~1|Stateid, data=finaldata,
control=list(opt="optim"))
VarCorr(Null.Model)
logLik(Null.Model.2)*-2
logLik(Null.Model)*-2
sigtest <- (logLik(Null.Model.2)*-2)-(logLik(Null.Model)*-2) #variation is significant
anova(Null.Model,Null.Model.2)
sigtest
Model.1<-lme(satis~environ+Emissions,random=~1|Stateid,data=finaldata,
control=list(opt="optim"))
summary(Model.1)
Model.1<-lme(satis~environ+Emissions,random=~1|Stateid, data=finaldata,
control=list(opt="optim"))
VarCorr(Model.1)
summary(Model.1)
finaldata[, c(3,18,19,22)] <- sapply(finaldata[, c(3,18,19,22)], as.numeric) # specifying columns to convert into numeric
Model.1<-lme(satis~environ+Emissions,random=~1|Stateid, data=finaldata,
control=list(opt="optim"))
summary(Model.1)
Model.4<-lme(satis~environ+age+Emissions,random=~age|Stateid, data=finaldata,
control=list(opt="optim"))
summary(Model.4)
logLik(Null.Model.2)*-2
logLik(Null.Model)*-2
sigtest <- (logLik(Null.Model.2)*-2)-(logLik(Null.Model)*-2) #variation is significant
anova(Null.Model,Null.Model.2)
sigtest
Model.2<-lme(satis~environ+Emissions+age+fam+gender+emp,random=~environ+age+fam+gender+emp|Stateid,data=finaldata,
control=list(opt="optim"))
summary(Model.2)
finaldata$environ <- factor(finaldata$environ, levels=rev(levels(finaldata$environ)), labels=c("Not at all", "Somewhat", "Very"))
finaldata$env <- as.numeric(finaldata$environ)
summary(finaldata$environ)
summarize(finaldata$environ)
library(dplyr)
library(car) #scatterplots with panel data
library(httr)
library(foreign) #to read .dta files
library(rJava) # necessary for xlsxjar package
library(xlsxjars) # necessary for xlsx package
library(xlsx) # to read xls files
library(ggplot2)
library(tidyr) # tidy tables
library(repmis)
library(rio) # export files from R
library(XML) # read URL links
library(xml2)
library(rvest) # exporting tables
library(psych) # multilevel analysis
library(plm) # panel data regression
library(gsubfn) # replacing characters
library(multilevel) # multilevel analysis
library(nlme) # GLM models
# Setting relative path
getwd()
setwd('~/GitHub/Climate-Happiness/Data')
#----------------------------------------------------------#
### 2. Data on renewable energy in Bundeslaender (Source: LIKI) ###
URLnrg <- 'http://www.lanuv.nrw.de/liki/index.php?indikator=608&aufzu=1&mode=indi'
# BUT manually downloaded Excel spreadsheets
messynrgprime <- read.xlsx(file.path("Energy", "export_land_primary.xlsx"), sheetIndex=1, startRow = 4, endRow = 21)
messynrgelec <- read.xlsx(file.path("Energy","export_land_strom.xlsx"), sheetIndex=1, startRow = 4, endRow = 21)
messynrguse <- read.xlsx(file.path("Energy","export_land_energyuse.xlsx"), sheetIndex=1, startRow = 4, endRow = 21)
# Convert K.D. (keine Daten) to NA
tidynrguse <- as.data.frame(sapply(messynrguse,
gsub, pattern="K.D.", replacement="."))
tidynrgelec <- as.data.frame(sapply(messynrgelec,
gsub, pattern="K.D.", replacement="."))
tidynrgprime <- as.data.frame(sapply(messynrgprime,
gsub, pattern="K.D.", replacement="."))
# Transform to numeric values, need to correct decimal places and loop but major issue: , instead of .
transform(tidynrgelec, X1990 = as.numeric(X1990))
# Convert data to tidy format (one variable per column) currently doesn't work bc they're not numerical
NRGprime <- gather(tidynrgprime, year, percentrenewable, 2:25, na.rm = FALSE, convert = TRUE)
NRGelec <- gather(tidynrgelec, year, percentrenewable, 2:25, na.rm = FALSE, convert = TRUE)
NRGuse <- gather(tidynrguse, year, percentrenewable, 2:26, na.rm = FALSE, convert = TRUE)
# Matching labels
colnames(NRGelec) <- c("State", "Year", "Elec")
colnames(NRGprime) <- c("State", "Year", "Primary")
colnames(NRGuse) <- c("State", "Year", "Use")
NRG <- merge(NRGprime, NRGelec, by=c("Year","State"))
NRG2 <- merge(NRG, NRGuse, by=c("Year","State"))
# Merge and export data files into cvs
NRG.final <- as.data.frame(sapply(NRG2, gsub, pattern="X",replacement=""))
export(NRG.final, file="NRG.final.csv")
#----------------------------------------------------------#
### 3. Data for Bundeslaender CO2 emissions (Source: Statista, UGRdL, & AfEE) ###
# Merging files using file name pattern (all States are covered except NRW)
all_files <- list.files(path='Emissions', pattern="statistic_id")
all_subbed <- NULL
# Cleaning in a loop
for (i in all_files) {
message(i)
if (grepl(pattern = '.xls$', x = i)) {
message('Skipped')
}
else if (grepl(pattern = '.xlsx', x = i)) {
# Load individual document in to R as a list
temp_all <- read.xlsx(i, sheetIndex=2, header=FALSE)
temp_bundesland <- read.xlsx(i, sheetIndex=2, startRow=3, colIndex=2:2, endRow=3, header=FALSE)
temp_data <- read.xlsx(i, sheetIndex=2, startRow=6, header=FALSE)
# Extract specific cell for the name of the state
names(temp_data) <- c('Year', 'Emissions')
temp_data$State <- paste(temp_bundesland[1,1])
# Bind individual project to main data frame
all_subbed <- rbind(all_subbed, temp_data)
}
}
# Save as .csv
export(all_subbed, file = 'Emissions_cleaned.csv')
# # EXTRA: Cleaning individual file
# data <- read.xlsx2(all_files[3], sheetIndex=2, startRow=6, header=FALSE)
# colnames(data) <- c("Year", "Emissions")
# test <- read.xlsx(all_files[3], sheetIndex=2, startRow=3, colIndex=2:2, endRow=3, header=FALSE)
# data$Bundesland <- paste(test[1,1]) #create a new column with same values for all rows
# Extract missing info on NRW, while also modifying the excel file (see Appendix 1)
all.link <- 'http://www.ugrdl.de/tab34.htm'
Gase.table = readHTMLTable(all.link, header=T, which=1, stringsAsFactors=F)
names(Gase.table) <- c("State", "1990", "1995", "2000", "2005", "2010", "2011", "2011*", "2012")
export(Gase.table, file = 'Gase.csv')
# Merging CO2 files
NRW <- read.csv(file.path("Emissions", 'NRW.csv'), header=TRUE) #original file was amended by combining data from "Gase" and "foederal_erneuerbar-Wirtschaft_Datenblatt"
general <- rbind(all_subbed, NRW)
# Cleaning up names
Final <- as.data.frame(sapply(general,
gsub, pattern="Kohlendioxid-Emissionen je Einwohner im |Kohlendioxid-Emissionen je Einwohner in | bis 2012| bis 2010| bis 2011|\\**",replacement=""))
export(Final, file="Emissions_Final.csv") ## has no extra words
## | means "and", //is used for special characteristics such as *
#---------------------------------------------------------#
### 4. Merging GSOEP, Emissions and Energy files
# Tranforming GSOEP dta file to csv for merging (Source:DIW)
GSOEP = read.dta(file.path("GSOEP", "SOEP_short12.dta"))
# And then you simply write it to CSV
write.csv(GSOEP, file = "GSOEP.csv", row.names = FALSE)
# Read all files to be merged together
emissions = read.csv("Emissions_Final.csv")
GSOEP = read.csv("GSOEP.csv")
energy = read.csv("NRG.final.csv")
# Merge all 3 files together using State and Year as unique IDs
alldata <- merge(emissions,energy,by=c("Year","State"))
finaldata = merge(alldata,GSOEP,by=c("Year","State"))
finaldata <-as.data.frame(sapply(finaldata, gsub, pattern="Ã¼",replacement="ue"))
# XConvert State variable into numeric
finaldata$Stateid <- as.numeric(as.factor(finaldata$State))
finaldata$Stateid <- factor( as.numeric(as.factor(finaldata$State)),
labels = levels(finaldata$State))
finaldata$environ <- factor(finaldata$environ, levels=rev(levels(finaldata$environ)), labels=c("Not at all", "Somewhat", "Very"))
finaldata$env <- as.numeric(finaldata$environ)
finaldata[, c(3,18,22)] <- sapply(finaldata[, c(3,18,19,22)], as.numeric) # specifying columns to convert into numeric
summary(environ)
summary(env)
finaldata[, c(3,18,19,22)] <- sapply(finaldata[, c(3,18,19,22)], as.numeric) # specifying columns to convert into numeric
Model.1<-lme(satis~env+Emissions,random=~1|Stateid, data=finaldata,
control=list(opt="optim"))
summary(Model.1)
Model.2<-lme(satis~environ+Emissions+age+fam+gender+emp,random=~environ+age+fam+gender+emp|Stateid,data=finaldata,
control=list(opt="optim"))
summary(Model.2)
Model.2<-lme(satis~env+Emissions+age+fam+gender+emp,random=~environ+age+fam+gender+emp|Stateid,data=finaldata,
control=list(opt="optim"))
Model.2<-lme(satis~env+Emissions+age+fam+gender+emp,random=~env+age+fam+gender+emp|Stateid,data=finaldata,
control=list(opt="optim"))
Model.4<-lme(satis~environ+age+Emissions,random=~age|Stateid, data=finaldata,
control=list(opt="optim"))
Model.4<-lme(satis~env+age+Emissions,random=~age|Stateid, data=finaldata,
control=list(opt="optim"))
summary(Model.1)
Model.2<-lme(satis~env+Emissions+age+fam+gender+emp,random=~age+fam+gender+emp|Stateid,data=finaldata,
control=list(opt="optim"))
Model.4<-lme(satis~env+age+Emissions,random=~age|Stateid, data=finaldata,
control=list(opt="optim"))
Model.4<-lme(satis~environ+age+Emissions,random=~age|Stateid, data=finaldata,
control=list(opt="optim"))
Model.2<-lme(satis~env+Emissions+age+fam+gender+emp,random=~age+fam+gender+emp|Stateid,data=finaldata,
control=list(opt="optim"))
finaldata$environ <- factor(finaldata$environ, levels=rev(levels(finaldata$environ)), labels=c("Not at all", "Somewhat", "Very"))
getwd()
URLnrg <- 'http://www.lanuv.nrw.de/liki/index.php?indikator=608&aufzu=1&mode=indi'
# BUT manually downloaded Excel spreadsheets
messynrgprime <- read.xlsx(file.path("Energy", "export_land_primary.xlsx"), sheetIndex=1, startRow = 4, endRow = 21)
messynrgelec <- read.xlsx(file.path("Energy","export_land_strom.xlsx"), sheetIndex=1, startRow = 4, endRow = 21)
messynrguse <- read.xlsx(file.path("Energy","export_land_energyuse.xlsx"), sheetIndex=1, startRow = 4, endRow = 21)
# Convert K.D. (keine Daten) to NA
tidynrguse <- as.data.frame(sapply(messynrguse,
gsub, pattern="K.D.", replacement="."))
tidynrgelec <- as.data.frame(sapply(messynrgelec,
gsub, pattern="K.D.", replacement="."))
tidynrgprime <- as.data.frame(sapply(messynrgprime,
gsub, pattern="K.D.", replacement="."))
# Transform to numeric values, need to correct decimal places and loop but major issue: , instead of .
transform(tidynrgelec, X1990 = as.numeric(X1990))
# Convert data to tidy format (one variable per column) currently doesn't work bc they're not numerical
NRGprime <- gather(tidynrgprime, year, percentrenewable, 2:25, na.rm = FALSE, convert = TRUE)
NRGelec <- gather(tidynrgelec, year, percentrenewable, 2:25, na.rm = FALSE, convert = TRUE)
NRGuse <- gather(tidynrguse, year, percentrenewable, 2:26, na.rm = FALSE, convert = TRUE)
# Matching labels
colnames(NRGelec) <- c("State", "Year", "Elec")
colnames(NRGprime) <- c("State", "Year", "Primary")
colnames(NRGuse) <- c("State", "Year", "Use")
NRG <- merge(NRGprime, NRGelec, by=c("Year","State"))
NRG2 <- merge(NRG, NRGuse, by=c("Year","State"))
# Merge and export data files into cvs
NRG.final <- as.data.frame(sapply(NRG2, gsub, pattern="X",replacement=""))
export(NRG.final, file="NRG.final.csv")
#----------------------------------------------------------#
### 3. Data for Bundeslaender CO2 emissions (Source: Statista, UGRdL, & AfEE) ###
# Merging files using file name pattern (all States are covered except NRW)
all_files <- list.files(path='Emissions', pattern="statistic_id")
all_subbed <- NULL
# Cleaning in a loop
for (i in all_files) {
message(i)
if (grepl(pattern = '.xls$', x = i)) {
message('Skipped')
}
else if (grepl(pattern = '.xlsx', x = i)) {
# Load individual document in to R as a list
temp_all <- read.xlsx(i, sheetIndex=2, header=FALSE)
temp_bundesland <- read.xlsx(i, sheetIndex=2, startRow=3, colIndex=2:2, endRow=3, header=FALSE)
temp_data <- read.xlsx(i, sheetIndex=2, startRow=6, header=FALSE)
# Extract specific cell for the name of the state
names(temp_data) <- c('Year', 'Emissions')
temp_data$State <- paste(temp_bundesland[1,1])
# Bind individual project to main data frame
all_subbed <- rbind(all_subbed, temp_data)
}
}
# Save as .csv
export(all_subbed, file = 'Emissions_cleaned.csv')
# # EXTRA: Cleaning individual file
# data <- read.xlsx2(all_files[3], sheetIndex=2, startRow=6, header=FALSE)
# colnames(data) <- c("Year", "Emissions")
# test <- read.xlsx(all_files[3], sheetIndex=2, startRow=3, colIndex=2:2, endRow=3, header=FALSE)
# data$Bundesland <- paste(test[1,1]) #create a new column with same values for all rows
# Extract missing info on NRW, while also modifying the excel file (see Appendix 1)
all.link <- 'http://www.ugrdl.de/tab34.htm'
Gase.table = readHTMLTable(all.link, header=T, which=1, stringsAsFactors=F)
names(Gase.table) <- c("State", "1990", "1995", "2000", "2005", "2010", "2011", "2011*", "2012")
export(Gase.table, file = 'Gase.csv')
# Merging CO2 files
NRW <- read.csv(file.path("Emissions", 'NRW.csv'), header=TRUE) #original file was amended by combining data from "Gase" and "foederal_erneuerbar-Wirtschaft_Datenblatt"
general <- rbind(all_subbed, NRW)
# Cleaning up names
Final <- as.data.frame(sapply(general,
gsub, pattern="Kohlendioxid-Emissionen je Einwohner im |Kohlendioxid-Emissionen je Einwohner in | bis 2012| bis 2010| bis 2011|\\**",replacement=""))
export(Final, file="Emissions_Final.csv") ## has no extra words
## | means "and", //is used for special characteristics such as *
#---------------------------------------------------------#
### 4. Merging GSOEP, Emissions and Energy files
# Tranforming GSOEP dta file to csv for merging (Source:DIW)
GSOEP = read.dta(file.path("GSOEP", "SOEP_short12.dta"))
# And then you simply write it to CSV
write.csv(GSOEP, file = "GSOEP.csv", row.names = FALSE)
# Read all files to be merged together
emissions = read.csv("Emissions_Final.csv")
GSOEP = read.csv("GSOEP.csv")
energy = read.csv("NRG.final.csv")
# Merge all 3 files together using State and Year as unique IDs
alldata <- merge(emissions,energy,by=c("Year","State"))
finaldata = merge(alldata,GSOEP,by=c("Year","State"))
finaldata <-as.data.frame(sapply(finaldata, gsub, pattern="Ã¼",replacement="ue"))
# XConvert State variable into numeric
finaldata$Stateid <- as.numeric(as.factor(finaldata$State))
finaldata$Stateid <- factor( as.numeric(as.factor(finaldata$State)),
labels = levels(finaldata$State))
finaldata[, c(3,18,19,22)] <- sapply(finaldata[, c(3,18,19,22)], as.numeric) # specifying columns to convert into numeric
Model.1<-lme(satis~environ+Emissions,random=~1|Stateid, data=finaldata,
control=list(opt="optim"))
summary(Model.1)
Model.2<-lme(satis~environ+Emissions+age+fam+gender+emp,random=~age+fam+gender+emp|Stateid,data=finaldata,
control=list(opt="optim"))
Model.4<-lme(satis~environ+age+Emissions,random=~age|Stateid, data=finaldata,
control=list(opt="optim"))
summary(Model.4)
summary(Model.2)
Model.4a<-update(Model.4,random=~1|Stateid)
anova(Model.4,Model.4a)
names(anova)
test <- anova(Null.Model,Null.Model.2)
test <- anova(Model.4,Model.4a)
names(test)
test$L.Ratio
(anova(Model.4,Model.4a))$L.Ratio #L.Ratio is the sig test (significant)
Model.I<-lme(satis~environ+emp+Emissions+emp:Emissions,
random=~emp|Stateid,data=finaldata,control=list(opt="optim"))
Model.I<-lme(satis~environ+emp+Emissions+emp:Emissions,
random=~emp|Stateid,data=finaldata,control=list(opt="optim"))
round(summary(Model.I)$tTable,dig=3)
Model.I<-lme(satis~environ+emp+age+fam+Emissions+fam:age,
random=~emp+age+fam|Stateid,data=finaldata,control=list(opt="optim"))
round(summary(Model.I)$tTable,dig=3)
interaction.plot(fam, age, satis)
attach(finaldata)
interaction.plot(fam, age, satis)
Model.I<-lme(satis~environ+emp+age+fam+Emissions+fam:age,
random=~1+emp+age+fam|Stateid,data=finaldata,control=list(opt="optim"))
round(summary(Model.I)$tTable,dig=3)
Model.I<-lme(satis~environ+emp+age+fam+Emissions+fam*age,
random=~1+emp+age+fam|Stateid,data=finaldata,control=list(opt="optim"))
round(summary(Model.I)$tTable,dig=3)
install.packages("interplot")
Model.I<-lme(satis~environ+emp+age+fam+Emissions+fam*age,
random=~1+emp+age+fam|Stateid,data=finaldata,control=list(opt="optim"))
interplot(m = m_fam, var1 = "fam", var2 = "age")
library(interplot)
interplot(m = m_fam, var1 = "fam", var2 = "age")
interplot(m = Model.I, var1 = "fam", var2 = "age")
m_fam<-lme(satis~fam*age,
random=~1+age+fam|Stateid,data=finaldata,control=list(opt="optim"))
interplot(m = m_fam, var1 = "fam", var2 = "age")
