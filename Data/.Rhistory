remove(people)
remove(URL)
remove(year)
remove(MedalsTable)
remove(ExpensesTable)
remove(people)
remove(URL)
remove(year)
remove(trend_income)
remove(url)
remove(hpi.data)
install dplry
install rvest
install.packages('rvest')
install.packages("rvest")
install.packages('dplry')
library('dplyr')
library('rvest')
URL('http://www.bbc.com/sport/winter-olympics/2014/medals/countries')
URL <- ('http://www.bbc.com/sport/winter-olympics/2014/medals/countries')
table <- URL %>% read_html() %>%
html_nodes('table') %>%
html_table() %>%
as.data.frame
names(table) <- c("Rank", "Country", "Gold", "Silver", "Bronze", "Total", "Other")
descending <- arrange(table, desc(Total))
head(descending)[1:3, ]
install.packages("stargazer")
install.packages("knitr")
install.packages("ggplot2")
install.packages("rvest")
install.packages("dplyr")
library("stargazer")
library("knitr")
library("ggplot2")
library("rvest")
library("dplyr")
URL <- 'http://www.ats.ucla.edu/stat/data/binary.csv'
Admission <- read.csv(URL)
Admission <- read.csv(URL)
Logit1 <- glm(admit ~ gre + gpa + as.factor(rank),
data = Admission, family = 'binomial')
fitted <- with(Admission,
data.frame(gre = mean(gre),
gpa = mean(gpa),
rank = factor(1:4)))
fitted$predicted <- predict(Logit1, newdata = fitted,
type = 'response')
kable(fitted)
caption = 'Predicted Probabilities for Fitted Values')
fitted$predicted <- predict(Logit1, newdata = fitted,
type = 'response')
kable(fitted, align = 'c', digits = 2,
caption = 'Predicted Probabilities for Fitted Values')
L1 <- glm(admit ~ gre,
data = Admission, family = 'binomial')
L2 <- glm(admit ~ gre + gpa,
data = Admission, family = 'binomial')
L3 <- glm(admit ~ gre + gpa + as.factor(rank),
data = Admission, family = 'binomial')
labels <- c('GRE Score', 'GPA Score',
'2nd Ranked School', '3rd Ranked School',
'4th Ranked School', '(Intercept)')
stargazer::stargazer(L1, L2, L3, covariate.labels = labels,
title = 'Logistic Regression Estimates of Grad School Acceptance',
digits = 2, type = 'html')
digits = 2, type = 'html')
labels <- c('GRE Score', 'GPA Score',
'2nd Ranked School', '3rd Ranked School',
'4th Ranked School', '(Intercept)')
stargazer::stargazer(L1, L2, L3, covariate.labels = labels,
title = 'Logistic Regression Estimates of Grad School Acceptance',
digits = 2, type = 'html')
labels <- c('GRE Score', 'GPA Score',
'2nd Ranked School', '3rd Ranked School',
'4th Ranked School', '(Intercept)')
stargazer::stargazer(L1, L2, L3, covariate.labels = labels,
title = 'Logistic Regression Estimates of Grad School Acceptance',
digits = 2, type = 'latex', header = FALSE)
stargazer(L1, L2, L3, type = 'text')
install.packages(simGLM)
library(simGLM)
install.packages("simGLM")
library(simGLM)
install.packages("simGLM")
install.packages("simGLM")
install.package("simGLM")
install.packages("simGLM")
ghit::install_github('christophergandrud/simGLM')
install_github('christophergandrud/simGLM')
install.packages("ghit")
ghit::install_github('christophergandrud/simGLM')
library(car) # contains data
library(simGLM)
library(ggplot2) # only needed for adding additional arguments outside of sim_glm
# Estimate model
m1 <- lm(prestige ~ education + type, data = Prestige)
# Create fitted values
fitted_prestige <- expand.grid(education = 6:16, typewc = 1)
# Simulate and plot
sim_glm(obj = m1, newdata = fitted_prestige, x_coef = 'education') + ylab('Predicted Job Prestige\n') + xlab('\nYears of Education')
## typeprof fitted at 0
library("ghit", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library(simGLM)
ghit::install_github('christophergandrud/simGLM')
devtools::install_github('christophergandrud/simGLM')
install.packages('devtools')
devtools::install_github('christophergandrud/simGLM')
library(simGLM)
library(car) # contains data
library(simGLM)
library(ggplot2) # only needed for adding additional arguments outside of sim_glm
# Estimate model
m1 <- lm(prestige ~ education + type, data = Prestige)
# Create fitted values
fitted_prestige <- expand.grid(education = 6:16, typewc = 1)
# Simulate and plot
sim_glm(obj = m1, newdata = fitted_prestige, x_coef = 'education') + ylab('Predicted Job Prestige\n') + xlab('\nYears of Education')
## typeprof fitted at 0
install.packages("car")
library(car) # contains data
library(simGLM)
library(ggplot2) # only needed for adding additional arguments outside of sim_glm
# Estimate model
m1 <- lm(prestige ~ education + type, data = Prestige)
# Create fitted values
fitted_prestige <- expand.grid(education = 6:16, typewc = 1)
# Simulate and plot
sim_glm(obj = m1, newdata = fitted_prestige, x_coef = 'education') + ylab('Predicted Job Prestige\n') + xlab('\nYears of Education')
## typeprof fitted at 0
URL <- 'http://www.ats.ucla.edu/stat/data/binary.csv'
Admission <- read.csv(URL)
Admission$rank <- as.factor(Admission$rank)
# Estimate model
m2 <- glm(admit ~ gre + gpa + rank, data = Admission, family = 'binomial')
# Create fitted values
fitted_admit <- expand.grid(gre = seq(220, 800, by = 10), gpa = c(2, 4),
rank4 = 1)
# Simulate and plot
sim_glm(obj = m2, newdata = fitted_admit, model = 'logit', x_coef = 'gre',
group_coef = 'gpa')
install.packages("xlsxjars")
install.packages("rJava")
install.packages("xlsxjars")
install.packages("xlsx")
library(xlsxjars)
library(rJava)
library(xlsxjars)
library(xlsx)
export_land_primary <- read.table("~/Documents/Hertie 2016/Collaborative Social Science Data/Research Project/Climate-Happiness-Repository/Data/export_land_primary.xlsx", header=TRUE, quote="\"")
View(export_land_primary)
install.packages("xlsx")
install.packages("xlsxjars")
install.packages("rJava")
library(rJava)
library(xlsxjars)
library(xlsx)
export_land_primary <- read.csv("~/Documents/Hertie 2016/Collaborative Social Science Data/Research Project/Climate-Happiness-Repository/Data/export_land_primary.csv", comment.char="#")
View(export_land_primary)
use warnings()
use warnings()
warnings()
setwd("~/Documents/Hertie 2016/Collaborative Social Science Data/Research Project/GitHub")
getwd()
all_files <- list.files(pattern="statistic_id")
setwd("~/Documents/Hertie 2016/Collaborative Social Science Data/Research Project/GitHub/Climate-Happiness-Repository")
getwd()
all_files <- list.files(pattern="statistic_id")
all_files <- list.files(pattern="statistic_id")
all_subbed <- NULL
all_files <- list.files(pattern=".xlsx")
all_subbed <- NULL
all_files <- list.files(pattern=".xlsx")
setwd("~/Documents/Hertie 2016/Collaborative Social Science Data/Research Project/GitHub/Climate-Happiness-Repository/Data")
all_files <- list.files(pattern="statistic_id")
all_subbed <- NULL
# 3. Cleaning in a loop
for (i in all_files) {
message(i)
if (grepl(pattern = '.xls$', x = i)) {
message('Skipped')
}
else if (grepl(pattern = '.xlsx', x = i)) {
# Load individual document in to R as a list
temp_all <- read.xlsx(i, sheetIndex=2, header=FALSE)
temp_bundesland <- read.xlsx(i, sheetIndex=2, startRow=3, colIndex=2:2, endRow=3, header=FALSE)
temp_data <- read.xlsx(i, sheetIndex=2, startRow=6, header=FALSE)
# Extract specific cell for the name of the state
names(temp_data) <- c('Year', 'Emissions')
temp_data$State <- paste(temp_bundesland[1,1])
# Bind individual project to main data frame
all_subbed <- rbind(all_subbed, temp_data)
}
}
# 4. Save as .csv
# Add file directory as needed
library(dplyr)
library(httr)
# 1. Necessary packages
library(rJava)
library(xlsxjars)
library(xlsx)
library(ggplot2)
library(tidyr)
library(repmis)
library(rio)
library(rvest)
library(xml2)
library(rvest)
for (i in all_files) {
message(i)
if (grepl(pattern = '.xls$', x = i)) {
message('Skipped')
}
else if (grepl(pattern = '.xlsx', x = i)) {
# Load individual document in to R as a list
temp_all <- read.xlsx(i, sheetIndex=2, header=FALSE)
temp_bundesland <- read.xlsx(i, sheetIndex=2, startRow=3, colIndex=2:2, endRow=3, header=FALSE)
temp_data <- read.xlsx(i, sheetIndex=2, startRow=6, header=FALSE)
# Extract specific cell for the name of the state
names(temp_data) <- c('Year', 'Emissions')
temp_data$State <- paste(temp_bundesland[1,1])
# Bind individual project to main data frame
all_subbed <- rbind(all_subbed, temp_data)
}
}
# 4. Save as .csv
# Add file directory as needed
export(all_subbed, file = 'Emissions_cleaned.csv')
# # EXTRA: Cleaning individual file
# data <- read.xlsx2(all_files[3], sheetIndex=2, startRow=6, header=FALSE)
# colnames(data) <- c("Year", "Emissions")
# test <- read.xlsx(all_files[3], sheetIndex=2, startRow=3, colIndex=2:2, endRow=3, header=FALSE)
# data$Bundesland <- paste(test[1,1]) #create a new column with same values for all rows
# 5. Extract missing info on NRW, while also modifying the excel file (see Appendix 1)
library(XML)
all.link <- 'http://www.ugrdl.de/tab34.htm'
Gase.table = readHTMLTable(all.link, header=T, which=1, stringsAsFactors=F)
names(Gase.table) <- c("State", "1990", "1995", "2000", "2005", "2010", "2011", "2011*", "2012")
export(Gase.table, file = 'Gase.csv')
# 6. Merging files
NRW <- read.csv('NRW.csv', header=TRUE)
general <- rbind(all_subbed, NRW)
# 7. Cleaning up names
install.packages('gsubfn')
library(gsubfn)
Final <- as.data.frame(sapply(general,
gsub, pattern="Kohlendioxid-Emissionen je Einwohner im |Kohlendioxid-Emissionen je Einwohner in | bis 2012| bis 2010| bis 2011|\\**",replacement=""))
export(Final, file="Final.csv") ## has no extra words
View(Final)
## | means "and", //is used for special characteristics such as *
# 8. Make sure Bundeslander match
emissions <- as.data.frame(levels(Final$State))
export(emissions, file="C:\\Users\\meerim\\Desktop\\emissions.csv")
URLnrg <- 'http://www.lanuv.nrw.de/liki/index.php?indikator=608&aufzu=1&mode=indi'
# but manually downloaded Excel spreadsheets
messynrgprime <- read.xlsx('~/Documents/Hertie 2016/Collaborative Social Science Data/Research Project/GitHub/Climate-Happiness-Repository/Data/export_land_primary.xlsx', 1, startRow = 4, endRow = 21)
messynrgelec <- read.xlsx('~/Documents/Hertie 2016/Collaborative Social Science Data/Research Project/GitHub/Climate-Happiness-Repository/Data/export_land_strom.xlsx', 1, startRow = 4, endRow = 21)
messynrguse <- read.xlsx('~/Documents/Hertie 2016/Collaborative Social Science Data/Research Project/GitHub/Climate-Happiness-Repository/Data/export_land_energyuse.xlsx', 1, startRow = 4, endRow = 21)
# convert K.D. (keine Daten) to NA
NAs <- messynrgelec == "K.D."
is.na(messynrgelec)[NAs] <- TRUE
NAs2 <- messynrgprime == "K.D."
is.na(messynrgprime)[NAs2] <- TRUE
NAs3 <- messynrguse == "K.D."
is.na(messynrguse)[NAs3] <- TRUE
# transform to numeric values, need to correct decimal places and loop but major issue: , instead of .
transform(messynrgelec, X1990 = as.numeric(X1990))
# convert data to tidy format (one variable per column) currently doesn't work bc they're not numerical
NRGprime <- gather(messynrgprime, year, percentrenewable, 2:25, na.rm = FALSE, convert = TRUE)
NRGelec <- gather(messynrgelec, year, percentrenewable, 2:25, na.rm = FALSE, convert = TRUE)
NRGuse <- gather(messynrguse, year, percentrenewable, 2:26, na.rm = FALSE, convert = TRUE)
# Matching labels
colnames(NRGelec) <- c("State", "Year", "Elec")
colnames(NRGprime) <- c("State", "Year", "Primary")
colnames(NRGuse) <- c("State", "Year", "Use")
NRG <- merge(NRGprime, NRGelec, by=c("Year","State"))
NRG2 <- merge(NRG, NRGuse, by=c("Year","State"))
install.packages('gsubfn')
install.packages("gsubfn")
library(gsubfn)
NRG.final <- as.data.frame(sapply(NRG2, gsub, pattern="X",replacement=""))
export(NRG.final, file="NRG.final.csv")
# Make sure Bundeslander match
nrg <- as.data.frame(levels(NRG.final$State))
library(foreign)
GSOEP = read.dta("Data/GSOEP/SOEP_short12.dta")
GSOEP = read.dta("/GSOEP/SOEP_short12.dta")
GSOEP = read.dta("/SOEP_short12.dta")
GSOEP = read.dta("SOEP_short12.dta")
write.csv(GSOEP, file = "GSOEP.csv", row.names = FALSE)
emissions = read.csv("/emissions/Final.csv")
emissions = read.csv("Final.csv")
GSOEP = read.csv("GSOEP.csv")
energy = read.csv("NRG.final.csv")
export(Final, file="Emissions_Final.csv") ## has no extra words
emissions = read.csv("Emissions_Final.csv")
GSOEP = read.csv("GSOEP.csv")
energy = read.csv("NRG.final.csv")
alldata <- merge(emissions,energy,by=c("Year","State"))
finaldata = merge(alldata,energy,by=c("Year","State"))
export(finaldata, file="All_Merged_Data.csv")
View(finaldata)
levels(finaldata$State)
messynrgprime <- read.xlsx('~//export_land_primary.xlsx', 1, startRow = 4, endRow = 21)
messynrgprime <- read.xlsx("export_land_primary.xlsx", 1, startRow = 4, endRow = 21)
messynrgelec <- read.xlsx("export_land_strom.xlsx", 1, startRow = 4, endRow = 21)
messynrguse <- read.xlsx("export_land_energyuse.xlsx", 1, startRow = 4, endRow = 21)
URLnrg <- 'http://www.lanuv.nrw.de/liki/index.php?indikator=608&aufzu=1&mode=indi'
# but manually downloaded Excel spreadsheets
messynrgprime <- read.xlsx("export_land_primary.xlsx", 1, startRow = 4, endRow = 21)
messynrgelec <- read.xlsx("export_land_strom.xlsx", 1, startRow = 4, endRow = 21)
messynrguse <- read.xlsx("export_land_energyuse.xlsx", 1, startRow = 4, endRow = 21)
# convert K.D. (keine Daten) to NA
NAs <- messynrgelec == "K.D."
is.na(messynrgelec)[NAs] <- TRUE
NAs2 <- messynrgprime == "K.D."
is.na(messynrgprime)[NAs2] <- TRUE
NAs3 <- messynrguse == "K.D."
is.na(messynrguse)[NAs3] <- TRUE
# transform to numeric values, need to correct decimal places and loop but major issue: , instead of .
transform(messynrgelec, X1990 = as.numeric(X1990))
transform(messynrgelec, X1990 = as.numeric(X1990))
tidynrguse <- as.data.frame(sapply(messynrguse,
gsub, pattern="K.D.", replacement=""))
View(tidynrguse)
gsub, pattern="K.D.", replacement="."))
gsub, pattern="K.D.", replacement=""))
tidynrguse <- as.data.frame(sapply(messynrguse,
View(tidynrguse)
tidynrguse <- as.data.frame(sapply(messynrguse,
gsub, pattern="K.D.", replacement="."))
tidynrguse <- as.data.frame(sapply(messynrguse,
gsub, pattern="K.D.", replacement="."))
View(tidynrguse)
tidynrgelec <- as.data.frame(sapply(messynrgelec,
gsub, pattern="K.D.", replacement="."))
View(tidynrgelec)
tidynrgprime <- as.data.frame(sapply(messynrgprime,
gsub, pattern="K.D.", replacement="."))
View(tidynrgprime)
# load packages
library(dplyr)
library(httr)
library(foreign)
library(rJava)
library(xlsxjars)
library(xlsx)
library(ggplot2)
library(tidyr)
library(repmis)
library(rio)
library(xml2)
library(rvest)
# get data on renewable energy in Bundeslaender
getwd()
URLnrg <- 'http://www.lanuv.nrw.de/liki/index.php?indikator=608&aufzu=1&mode=indi'
# but manually downloaded Excel spreadsheets
messynrgprime <- read.xlsx("export_land_primary.xlsx", 1, startRow = 4, endRow = 21)
messynrgelec <- read.xlsx("export_land_strom.xlsx", 1, startRow = 4, endRow = 21)
messynrguse <- read.xlsx("export_land_energyuse.xlsx", 1, startRow = 4, endRow = 21)
# convert K.D. (keine Daten) to NA
tidynrguse <- as.data.frame(sapply(messynrguse,
gsub, pattern="K.D.", replacement="."))
tidynrgelec <- as.data.frame(sapply(messynrgelec,
gsub, pattern="K.D.", replacement="."))
tidynrgprime <- as.data.frame(sapply(messynrgprime,
gsub, pattern="K.D.", replacement="."))
# transform to numeric values, need to correct decimal places and loop but major issue: , instead of .
transform(messynrgelec, X1990 = as.numeric(X1990))
transform(tidynrgelec, X1990 = as.numeric(X1990))
transform(tidynrgelec, X1990 = as.numeric(X1990))
# convert data to tidy format (one variable per column) currently doesn't work bc they're not numerical
NRGprime <- gather(tidynrgprime, year, percentrenewable, 2:25, na.rm = FALSE, convert = TRUE)
NRGelec <- gather(tidynrgelec, year, percentrenewable, 2:25, na.rm = FALSE, convert = TRUE)
NRGuse <- gather(tidynrguse, year, percentrenewable, 2:26, na.rm = FALSE, convert = TRUE)
# Matching labels
colnames(NRGelec) <- c("State", "Year", "Elec")
colnames(NRGprime) <- c("State", "Year", "Primary")
colnames(NRGuse) <- c("State", "Year", "Use")
NRG <- merge(NRGprime, NRGelec, by=c("Year","State"))
NRG2 <- merge(NRG, NRGuse, by=c("Year","State"))
install.packages('gsubfn')
install.packages("gsubfn")
library(gsubfn)
NRG.final <- as.data.frame(sapply(NRG2, gsub, pattern="X",replacement=""))
export(NRG.final, file="NRG.final.csv")
all_files <- list.files(pattern="statistic_id")
all_subbed <- NULL
# 2. Cleaning in a loop
for (i in all_files) {
message(i)
if (grepl(pattern = '.xls$', x = i)) {
message('Skipped')
}
else if (grepl(pattern = '.xlsx', x = i)) {
# Load individual document in to R as a list
temp_all <- read.xlsx(i, sheetIndex=2, header=FALSE)
temp_bundesland <- read.xlsx(i, sheetIndex=2, startRow=3, colIndex=2:2, endRow=3, header=FALSE)
temp_data <- read.xlsx(i, sheetIndex=2, startRow=6, header=FALSE)
# Extract specific cell for the name of the state
names(temp_data) <- c('Year', 'Emissions')
temp_data$State <- paste(temp_bundesland[1,1])
# Bind individual project to main data frame
all_subbed <- rbind(all_subbed, temp_data)
}
}
# 3. Save as .csv
# Add file directory as needed
export(all_subbed, file = 'Emissions_cleaned.csv')
# # EXTRA: Cleaning individual file
# data <- read.xlsx2(all_files[3], sheetIndex=2, startRow=6, header=FALSE)
# colnames(data) <- c("Year", "Emissions")
# test <- read.xlsx(all_files[3], sheetIndex=2, startRow=3, colIndex=2:2, endRow=3, header=FALSE)
# data$Bundesland <- paste(test[1,1]) #create a new column with same values for all rows
# 4. Extract missing info on NRW, while also modifying the excel file (see Appendix 1)
library(XML)
all.link <- 'http://www.ugrdl.de/tab34.htm'
Gase.table = readHTMLTable(all.link, header=T, which=1, stringsAsFactors=F)
names(Gase.table) <- c("State", "1990", "1995", "2000", "2005", "2010", "2011", "2011*", "2012")
export(Gase.table, file = 'Gase.csv')
# 5. Merging files
NRW <- read.csv('NRW.csv', header=TRUE) #original file was amended by combining data from "Gase" and "foederal_erneuerbar-Wirtschaft_Datenblatt"
general <- rbind(all_subbed, NRW)
# 6. Cleaning up names
install.packages('gsubfn')
install.packages("gsubfn")
library(gsubfn)
Final <- as.data.frame(sapply(general,
gsub, pattern="Kohlendioxid-Emissionen je Einwohner im |Kohlendioxid-Emissionen je Einwohner in | bis 2012| bis 2010| bis 2011|\\**",replacement=""))
export(Final, file="Emissions_Final.csv") ## has no extra words
## | means "and", //is used for special characteristics such as *
GSOEP = read.dta("SOEP_short12.dta")
#And then you simply write it to CSV
write.csv(GSOEP, file = "GSOEP.csv", row.names = FALSE)
emissions = read.csv("Emissions_Final.csv")
GSOEP = read.csv("GSOEP.csv")
energy = read.csv("NRG.final.csv")
alldata <- merge(emissions,energy,by=c("Year","State"))
finaldata = merge(alldata,energy,by=c("Year","State"))
export(finaldata, file="All_Merged_Data.csv")
View(finaldata)
library(psych)
library(car)
library(gsubfn) #replacing characters
source('~/Documents/Hertie 2016/Collaborative Social Science Data/Research Project/GitHub/Climate-Happiness-Repository/Data/SourceFile.R', encoding = 'UTF-8')
install.packages("gsubfn")
install.packages("gsubfn")
source("SourceFile.R")"
data <- read.csv("AllMergedData.csv")
data <- read.csv("All_Merged_Data.csv")
data <- read.csv("All_Merged_Data.csv")
levels(data$State)
names(data)
data.frame(data)
boxplot(Emissions~State,
data=data,
main="Emissions by State",
xlab="State",
ylab="Emissions",
col="royalblue1",
border="royalblue4"
)
boxplot(Satisfaction~State,
data=data,
main="Satisfaction by State",
xlab="State",
ylab="Satisfaction (1-10)",
col="royalblue1",
border="royalblue4"
)
boxplot(satis~State,
data=data,
main="Satisfaction by State",
xlab="State",
ylab="Satisfaction (1-10)",
col="royalblue1",
border="royalblue4"
)
alldata <- merge(emissions,energy,by=c("Year","State"))
finaldata = merge(alldata,GSOEP,by=c("Year","State"))
#5. export merged data to single CSV file
export(finaldata, file="All_Merged_Data.csv")
source("SourceFile.R")"
```
```{r, include=FALSE}
data <- read.csv("All_Merged_Data.csv")
data <- read.csv("All_Merged_Data.csv")
source("SourceFile.R")"
source("SourceFile.R")
source('~/Documents/Hertie 2016/Collaborative Social Science Data/Research Project/GitHub/Climate-Happiness-Repository/Data/SourceFile.R', encoding = 'UTF-8')
install.packages("gsubfn")
install.packages("gsubfn")
source('~/Documents/Hertie 2016/Collaborative Social Science Data/Research Project/GitHub/Climate-Happiness-Repository/Data/SourceFile.R', encoding = 'UTF-8')
install.packages("gsubfn")
install.packages("gsubfn")
data <- read.csv("All_Merged_Data.csv")
setwd("~/Documents/Hertie 2016/Collaborative Social Science Data/Research Project/GitHub/Climate-Happiness-Repository/Data")
source('~/Documents/Hertie 2016/Collaborative Social Science Data/Research Project/GitHub/Climate-Happiness-Repository/Data/SourceFile.R', encoding = 'UTF-8')
install.packages("gsubfn")
install.packages("gsubfn")
source('~/Documents/Hertie 2016/Collaborative Social Science Data/Research Project/GitHub/Climate-Happiness-Repository/Data/SourceFile.R', encoding = 'UTF-8')
install.packages("gsubfn")
install.packages("gsubfn")
View(alldata)
View(finaldata)
alldata <- merge(emissions,energy,by=c("Year","State"))
finaldata = merge(alldata,GSOEP,by=c("Year","State"))
#5. export merged data to single CSV file
export(finaldata, file="All_Merged_Data.csv")
View(finaldata)
View(finaldata)
