ExpensesTable <- URL %>% read_html() %>%
html_nodes('#medals-table_table') %>%
html_table() %>%
as.data.frame
ExpensesTable <- URL %>% read_html() %>%
html_nodes('#medals-table_table') %>%
html_table() %>%
as.data.frame
library(rvest)
ExpensesTable <- URL %>% read_html() %>%
html_nodes('#medals-table_table') %>%
html_table() %>%
as.data.frame
head(medals-table)[, 1:3]
MedalsTable <- URL %>% read_html() %>%
html_nodes('#medals-table_table') %>%
html_table() %>%
as.data.frame
head(MedalsTable)[, 1:3]
head(MedalsTable)[ , 1:3]
head(MedalsTable)[ ,1:3]
head(MedalsTable)[1:3]
head(MedalsTable)
View(MedalsTable)
View(MedalsTable)
MedalsTable <- URL %>% read_html() %>%
html_nodes() %>%
html_table('#medals-table_table') %>%
as.data.frame
MedalsTable <- URL %>% read_html() %>%
html_nodes('#medals-table_table') %>%
html_table() %>%
as.data.frame
MedalsTable <- url %>%
html() %>%
html_nodes(xpath='//*[@id="sport"]/div[2]/div[2]/div/div[1]/div/section/div[2]/table') %>%
html_table()
library("rvest")
url <- "http://www.bbc.com/sport/winter-olympics/2014/medals/countries"
MedalsTable <- url %>%
html() %>%
html_nodes(xpath='//*[@id="sport"]/div[2]/div[2]/div/div[1]/div/section/div[2]/table') %>%
html_table()
MedalsTable <- url %>%
read_html() %>%
html_nodes(xpath='//*[@id="sport"]/div[2]/div[2]/div/div[1]/div/section/div[2]/table') %>%
html_table()
head(MedalsTable)
head(data)
group_data <- group_by(MedalsTable, Total)
head(group_data)[1:5, ]
group_data <- group_by(MedalsTable, Total)
group_data <- group_by (MedalsTable, Total)
library(dplyr)
group_data <- group_by (MedalsTable, Total)
group_data <- group_by (MedalsTable, Total)
group_data <- group_by(MedalsTable, Total)
group_data <- group_by_ (MedalsTable, Total)
head(group_data)[1:5,
group_data <- group_by_ (MedalsTable, Total)
head(group_data)[1:5, ]
min_max_medals <- summarize(group_data,
min_Total = min(Total),
max_Total = max(Total))
group_data <- group_by_ (MedalsTable, Total)
head(group_data)[1:5, ]
group_data <- group_by(MedalsTable, Total)
data.frame(t(sapply(mylistlist,c)))
data.frame(t(sapply(MedalsTable,c)))
group_data <- group_by (MedalsTable, Total)
as.data.frame(MedalsTable)
group_data <- group_by (MedalsTable, Total)
data.frame(t(sapply(MedalsTable,c)))
data.frame(t(sapply(MedalsTable,c)))
group_data <- group_by (MedalsTable, Total)
MedalsTable2<- data.frame(Country, Var.3, Var.4, Var.5, Total, NA.)
MedalsTable2<- data.frame(MedalsTable,Country, Var.3, Var.4, Var.5, Total, NA.)
data.frame(t(sapply(MedalsTable,c)))
as.data.frame(MedalsTable)
group_data <- group_by (MedalsTable, Total)
group_data <- group_by(MedalsTable, Total)
MedalsTable <- url %>%
read_html() %>%
html_nodes(xpath='//*[@id="sport"]/div[2]/div[2]/div/div[1]/div/section/div[2]/table') %>%
html_table()
as.data.frame()
MedalsTable <- url %>%
read_html() %>%
html_nodes(xpath='//*[@id="sport"]/div[2]/div[2]/div/div[1]/div/section/div[2]/table') %>%
html_table()
as.data.frame
head(MedalsTable)
group_data <- group_by(MedalsTable, Total)
MedalsTable2 <- url %>%
read_html() %>%
html_nodes(xpath='//*[@id="sport"]/div[2]/div[2]/div/div[1]/div/section/div[2]/table') %>%
html_table()
as.data.frame
head(MedalsTable2)
library(dplyr)
library(tidyr)
library(rvest)
install.packages('tidyr')
library(tidyr)
library("rvest")
library("rvest")
url <- "http://www.bbc.com/sport/winter-olympics/2014/medals/countries"
MedalsTable2 <- url %>%
read_html() %>%
html_nodes(xpath='//*[@id="sport"]/div[2]/div[2]/div/div[1]/div/section/div[2]/table') %>%
html_table()
as.data.frame
View(MedalsTable)
remove(MedalsTable)
remove(MedalsTable2)
MedalsTable <- url %>%
read_html() %>%
html_nodes(xpath='//*[@id="sport"]/div[2]/div[2]/div/div[1]/div/section/div[2]/table') %>%
html_table()
as.data.frame
names(MedalsTable) <- c("Rank", "Country","Gold","Silver","Bronze","Total","NA")
names(MedalsTable) <- c("Rank", "Country","Gold","Silver","Bronze","Total")
names(MedalsTable) <- c("Rank", "Country","Gold","Silver","Bronze","Total", "Other")
remove(MedalsTable)
remove(ExpensesTable)
remove(people)
remove(URL)
remove(year)
remove(MedalsTable)
remove(ExpensesTable)
remove(people)
remove(URL)
remove(year)
remove(trend_income)
remove(url)
remove(hpi.data)
install dplry
install rvest
install.packages('rvest')
install.packages("rvest")
install.packages('dplry')
library('dplyr')
library('rvest')
URL('http://www.bbc.com/sport/winter-olympics/2014/medals/countries')
URL <- ('http://www.bbc.com/sport/winter-olympics/2014/medals/countries')
table <- URL %>% read_html() %>%
html_nodes('table') %>%
html_table() %>%
as.data.frame
names(table) <- c("Rank", "Country", "Gold", "Silver", "Bronze", "Total", "Other")
descending <- arrange(table, desc(Total))
head(descending)[1:3, ]
install.packages("stargazer")
install.packages("knitr")
install.packages("ggplot2")
install.packages("rvest")
install.packages("dplyr")
library("stargazer")
library("knitr")
library("ggplot2")
library("rvest")
library("dplyr")
URL <- 'http://www.ats.ucla.edu/stat/data/binary.csv'
Admission <- read.csv(URL)
Admission <- read.csv(URL)
Logit1 <- glm(admit ~ gre + gpa + as.factor(rank),
data = Admission, family = 'binomial')
fitted <- with(Admission,
data.frame(gre = mean(gre),
gpa = mean(gpa),
rank = factor(1:4)))
fitted$predicted <- predict(Logit1, newdata = fitted,
type = 'response')
kable(fitted)
caption = 'Predicted Probabilities for Fitted Values')
fitted$predicted <- predict(Logit1, newdata = fitted,
type = 'response')
kable(fitted, align = 'c', digits = 2,
caption = 'Predicted Probabilities for Fitted Values')
L1 <- glm(admit ~ gre,
data = Admission, family = 'binomial')
L2 <- glm(admit ~ gre + gpa,
data = Admission, family = 'binomial')
L3 <- glm(admit ~ gre + gpa + as.factor(rank),
data = Admission, family = 'binomial')
labels <- c('GRE Score', 'GPA Score',
'2nd Ranked School', '3rd Ranked School',
'4th Ranked School', '(Intercept)')
stargazer::stargazer(L1, L2, L3, covariate.labels = labels,
title = 'Logistic Regression Estimates of Grad School Acceptance',
digits = 2, type = 'html')
digits = 2, type = 'html')
labels <- c('GRE Score', 'GPA Score',
'2nd Ranked School', '3rd Ranked School',
'4th Ranked School', '(Intercept)')
stargazer::stargazer(L1, L2, L3, covariate.labels = labels,
title = 'Logistic Regression Estimates of Grad School Acceptance',
digits = 2, type = 'html')
labels <- c('GRE Score', 'GPA Score',
'2nd Ranked School', '3rd Ranked School',
'4th Ranked School', '(Intercept)')
stargazer::stargazer(L1, L2, L3, covariate.labels = labels,
title = 'Logistic Regression Estimates of Grad School Acceptance',
digits = 2, type = 'latex', header = FALSE)
stargazer(L1, L2, L3, type = 'text')
install.packages(simGLM)
library(simGLM)
install.packages("simGLM")
library(simGLM)
install.packages("simGLM")
install.packages("simGLM")
install.package("simGLM")
install.packages("simGLM")
ghit::install_github('christophergandrud/simGLM')
install_github('christophergandrud/simGLM')
install.packages("ghit")
ghit::install_github('christophergandrud/simGLM')
library(car) # contains data
library(simGLM)
library(ggplot2) # only needed for adding additional arguments outside of sim_glm
# Estimate model
m1 <- lm(prestige ~ education + type, data = Prestige)
# Create fitted values
fitted_prestige <- expand.grid(education = 6:16, typewc = 1)
# Simulate and plot
sim_glm(obj = m1, newdata = fitted_prestige, x_coef = 'education') + ylab('Predicted Job Prestige\n') + xlab('\nYears of Education')
## typeprof fitted at 0
library("ghit", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library(simGLM)
ghit::install_github('christophergandrud/simGLM')
devtools::install_github('christophergandrud/simGLM')
install.packages('devtools')
devtools::install_github('christophergandrud/simGLM')
library(simGLM)
library(car) # contains data
library(simGLM)
library(ggplot2) # only needed for adding additional arguments outside of sim_glm
# Estimate model
m1 <- lm(prestige ~ education + type, data = Prestige)
# Create fitted values
fitted_prestige <- expand.grid(education = 6:16, typewc = 1)
# Simulate and plot
sim_glm(obj = m1, newdata = fitted_prestige, x_coef = 'education') + ylab('Predicted Job Prestige\n') + xlab('\nYears of Education')
## typeprof fitted at 0
install.packages("car")
library(car) # contains data
library(simGLM)
library(ggplot2) # only needed for adding additional arguments outside of sim_glm
# Estimate model
m1 <- lm(prestige ~ education + type, data = Prestige)
# Create fitted values
fitted_prestige <- expand.grid(education = 6:16, typewc = 1)
# Simulate and plot
sim_glm(obj = m1, newdata = fitted_prestige, x_coef = 'education') + ylab('Predicted Job Prestige\n') + xlab('\nYears of Education')
## typeprof fitted at 0
URL <- 'http://www.ats.ucla.edu/stat/data/binary.csv'
Admission <- read.csv(URL)
Admission$rank <- as.factor(Admission$rank)
# Estimate model
m2 <- glm(admit ~ gre + gpa + rank, data = Admission, family = 'binomial')
# Create fitted values
fitted_admit <- expand.grid(gre = seq(220, 800, by = 10), gpa = c(2, 4),
rank4 = 1)
# Simulate and plot
sim_glm(obj = m2, newdata = fitted_admit, model = 'logit', x_coef = 'gre',
group_coef = 'gpa')
install.packages("xlsxjars")
install.packages("rJava")
install.packages("xlsxjars")
install.packages("xlsx")
library(xlsxjars)
library(rJava)
library(xlsxjars)
library(xlsx)
export_land_primary <- read.table("~/Documents/Hertie 2016/Collaborative Social Science Data/Research Project/Climate-Happiness-Repository/Data/export_land_primary.xlsx", header=TRUE, quote="\"")
View(export_land_primary)
install.packages("xlsx")
install.packages("xlsxjars")
install.packages("rJava")
library(rJava)
library(xlsxjars)
library(xlsx)
export_land_primary <- read.csv("~/Documents/Hertie 2016/Collaborative Social Science Data/Research Project/Climate-Happiness-Repository/Data/export_land_primary.csv", comment.char="#")
View(export_land_primary)
use warnings()
use warnings()
warnings()
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
source("SourceFile.R")
setwd("~/Documents/Hertie 2016/Collaborative Social Science Data/Research Project/GitHub/Climate-Happiness-Repository/Data")
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
source("SourceFile.R")
install.packages("gsubfn")
install.packages("gsubfn")
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
source("SourceFile.R")
install.packages("gsubfn")
install.packages("gsubfn")
```
```{r, include=FALSE}
data <- read.csv("All_Merged_Data.csv")
attach(data)
```
Basic statistics
```{r, echo=FALSE}
aggregate(formula=Satisfaction~Emissions+Year+State, data=data, FUN=mean)
aggregate(formula=satis_labels~Emissions+Year+State, data=data, FUN=mean)
data[data$State=="Berlin", ]
```
```{r, echo=FALSE}
#Boxplot of emissions levels by state
names(data)
data.frame(data)
boxplot(emissions~State,
data=data,
main="Emissions by State",
boxplot(emissions~State,
data=data,
main="Emissions by State",
xlab="State",
ylab="Emissions",
col="royalblue1",
border="royalblue4"
)
```
boxplot(emissions~State,
data=data,
main="Emissions by State",
xlab="State",
ylab="Emissions",
col="royalblue1",
border="royalblue4"
)
View(data)
boxplot(Emissions~State,
data=data,
main="Emissions by State",
xlab="State",
ylab="Emissions",
col="royalblue1",
border="royalblue4"
)
boxplot(satis~State,
data=data,
main="Satisfaction by State",
xlab="State",
ylab="Satisfaction (1-10)",
col="royalblue1",
border="royalblue4"
)
boxplot(satis_labels~State,
data=data,
main="Satisfaction by State",
xlab="State",
ylab="Satisfaction (1-10)",
col="royalblue1",
border="royalblue4"
)
boxplot(satis~State,
data=data,
main="Satisfaction by State",
xlab="State",
ylab="Satisfaction (1-10)",
col="royalblue1",
border="royalblue4"
)
qplot(data$State, data$Emissions, geom = "boxplot", main = "Emissions by State", xlab = "State", ylab = "Emissions", fill = factor(data$State)) + guides(fill=FALSE)
library(foreign)
library(car)
#panel data scatterplot of aggregate state satisfaction over years
scatterplot(Satisfaction~Year|State, boxplots=FALSE, smooth=TRUE, reg.line=FALSE, data=Panel)
scatterplot(Satisfaction~Year|State, boxplots=FALSE, smooth=TRUE, reg.line=FALSE, data=data)
scatterplot(satis_labels~Year|State, boxplots=FALSE, smooth=TRUE, reg.line=FALSE, data=data)
scatterplot(satis~Year|State, boxplots=FALSE, smooth=TRUE, reg.line=FALSE, data=data)
Y1<-cbind(satis_labels)
X1<-cbind(emissions, Use, concerned)#needs to be updated based on updatedvariable list
X1<-cbind(Emissions, Use, environ, gender, age)
pdataind<-plm.data(data, index=c("PID","Year"))
pdataind<-plm.data(data, index=c("pid","Year"))
summary(X1)
summary(Y1)
#pooled OLS estimator
L1<-plm(Y1~X1, data=pdataind, model="pooling")
summary(L1)
#between estimator
L2<-plm(Y1~X1, data=pdataind, model="between")
summary(L2)
#first difference estimator
L3<-plm(Y1~X1, data=pdataind, model="fd")
summary(L3)
#fixed effects or within estimator
L4<-plm(Y1~X1, data=pdataind, model="within")
summary(L4)
#LM test for fixed effects vs OLS
pFtest(fixed,pooling)
pFtest(between,pooling)
lrtest(between,pooling)
install.packages(lmtest)
install.packages("lmtest")
install.packages("lmtest")
library(lmtest)
lrtest(between,pooling)
lrtest(L2,L1)
pFtest(L2,L1)
stargazer::stargazer(L1, L2, L3, L4, covariate.labels = labels,
title = 'Regression Estimates of Life Satisfaction',
digits = 2, type = 'html')
stargazer::stargazer(L1, L2, L3, L4,
title = 'Regression Estimates of Life Satisfaction',
digits = 2, type = 'html')
stargazer::stargazer(L1, L2, L3, L4,
title = 'Regression Estimates of Life Satisfaction',
digits = 2, type = 'html'
)
install.packages("stargazer")
install.packages("stargazer")
library(stargazer)
stargazer::stargazer(L1, L2, L3, L4,
title = 'Regression Estimates of Life Satisfaction',
digits = 2, type = 'html'
)
stargazer(L1, L2, L3, L4,
title = 'Regression Estimates of Life Satisfaction',
digits = 2, type = 'html'
)
setwd("~/Documents/Hertie 2016/Collaborative Social Science Data/Research Project/GitHub/Climate-Happiness-Repository/Data")
```{r setup, include=FALSE}
source("SourceFile.R")
install.packages("gsubfn")
install.packages("gsubfn")
source('~/Documents/Hertie 2016/Collaborative Social Science Data/Research Project/GitHub/Climate-Happiness-Repository/Data/SourceFile.R', encoding = 'UTF-8')
install.packages("gsubfn")
install.packages("gsubfn")
install.packages(contrib.url)
install.packages("contrib.url")
stargazer(L1, L2, L3, L4,
title = 'Regression Estimates of Life Satisfaction',
digits = 2, type = 'html'
)
Y2<-cbind(satis_labels)
X2<-cbind(Emissions, Use, environ, gender, age)#needs to be updated based on updatedvariable list
pdatastate<-plm.data(data, index=c("State","Year"))
summary(X2)
summary(Y2)
#pooled OLS estimator
L5<-plm(Y2~X2, data=pdatastate, model="pooling")
L5<-plm(Y2~X2, data=pdatastate, model="pooling")
pdatastate<-plm.data(data, index=c("State","syear"))
summary(X2)
summary(Y2)
#pooled OLS estimator
L5<-plm(Y2~X2, data=pdatastate, model="pooling")
range(satis_lables$Emissions)
range(satis$Emissions)
range(satis)
L6_coef <- matrix(coef(L6))
L6<-plm(Y2~X2, data=pdatastate, model="between")
boxplot(plh0182~State,
data=data,
main="Satisfaction by State",
xlab="State",
ylab="Satisfaction (1-4)",
col="royalblue1",
border="royalblue4"
)
range(satis)
Satisfaction_range<-1:4
#extract point estimates and co-variance matrix
L2_coef <- matrix(coef(L2))
L2_vcov <- vcov(L2)
library(MASS) # contains the mvrnorm function
drawn <- mvrnorm(n = 1000, mu = L2_coef, Sigma = L2_vcov) %>%
data.frame
head(drawn)[1:3, ]
drawn_sim <- merge(drawn, Emissions_range)
drawn_sim <- merge(drawn, Satisfaction_range)
# Rename the fitted value variable
drawn_sim <- dplyr::rename(drawn_sim, fitted_satisfaction = y)
nrow(drawn)
nrow(drawn_sim)
#calculate the quantity of interest
names(drawn_sim)
drawn_sim$sim_wc <- drawn_sim[, 1] + drawn_sim[, 2] * drawn_sim[, 5] +
drawn_sim[, 3]
#plot points
ggplot(drawn_sim, aes(fitted_emissions, sim_wc)) +
geom_point(alpha = 0.2) + stat_smooth(se = FALSE) +
theme_bw()
central <- drawn_sim %>% group_by(fitted_satisfaction) %>%
summarise(median_sim = median(sim_wc),
lower_95 = quantile(sim_wc, probs = 0.025),
upper_95 = quantile(sim_wc, probs = 0.975)
)
ggplot(drawn_sim, aes(fitted_satisfaction, sim_wc)) +
geom_point(alpha = 0.2) + stat_smooth(se = FALSE) +
theme_bw()
# Find 95% central interval and median at each fitted value of edu
central <- drawn_sim %>% group_by(fitted_satisfaction) %>%
summarise(median_sim = median(sim_wc),
lower_95 = quantile(sim_wc, probs = 0.025),
upper_95 = quantile(sim_wc, probs = 0.975)
)
#plot 95% confidence interval
ggplot(central, aes(fitted_emissions, median_sim)) +
geom_ribbon(aes(ymin = lower_95, ymax = upper_95), alpha = 0.3) +
geom_line() + theme_bw()
ggplot(central, aes(fitted_satisfaction, median_sim)) +
geom_ribbon(aes(ymin = lower_95, ymax = upper_95), alpha = 0.3) +
geom_line() + theme_bw()
